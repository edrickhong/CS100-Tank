


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 INCLUDE          include.s
    1 00000000         
    2 00000000 4001800C 
                       Prescaler
                               equ              0X4001800C
    3 00000000 40018018 
                       Match0  equ              0X40018018
    4 00000000 4001801C 
                       Match1  equ              0X4001801C
    5 00000000 40018020 
                       Match2  equ              0X40018020
    6 00000000 400FC0C4 
                       Pconp   equ              0x400FC0C4
    7 00000000 40034000 
                       Adcr0   equ              0x40034000
    8 00000000 40034004 
                       Adgr    equ              0x40034004
    9 00000000 40018004 
                       Tcr     equ              0x40018004
   10 00000000 400FC1A8 
                       PclkSel0
                               equ              0x400FC1A8
   11 00000000 40018070 
                       CounterTimercr
                               equ              0x40018070  ;selects either tim
                                                            er or counter
   12 00000000 40018050 
                       LoadEnabler
                               equ              0X40018050  ; enables pwm match
                                                             registers
   13 00000000 40018014 
                       Matchcr equ              0x40018014
   14 00000000 4001804C 
                       PWMcr   equ              0x4001804C
   15 00000000         
   16 00000000         
   17 00000000         
   18 00000000         ;Pin select register
   19 00000000 4002C000 
                       PinSel0 equ              0x4002C000
   20 00000000 4002C004 
                       PinSel1 equ              0x4002C004
   21 00000000 4002C008 
                       PinSel2 equ              0x4002C008
   22 00000000 4002C00C 
                       PinSel3 equ              0x4002C00C
   23 00000000 4002C010 
                       PinSel4 equ              0x4002C010
   24 00000000 4002C01C 
                       PinSel7 equ              0x4002C01C
   25 00000000 4002C020 
                       PinSel8 equ              0x4002C020
   26 00000000 4002C024 
                       PinSel9 equ              0x4002C024
   27 00000000 4002C028 
                       PinSel10
                               equ              0x4002C028
   28 00000000         



ARM Macro Assembler    Page 2 


   29 00000000         
   30 00000000         ;This acts like a DDR
   31 00000000 2009C000 
                       DDR0    equ              0x2009C000
   32 00000000 2009C020 
                       DDR1    equ              0x2009C020
   33 00000000 2009C040 
                       DDR2    equ              0x2009C040
   34 00000000 2009C060 
                       DDR3    equ              0x2009C060
   35 00000000 2009C080 
                       DDR4    equ              0x2009C080
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         ;This acts like PORT
   40 00000000 2009C014 
                       Port0   equ              0x2009C014
   41 00000000 2009C034 
                       Port1   equ              0x2009C034
   42 00000000 2009C054 
                       Port2   equ              0x2009C054
   43 00000000 2009C074 
                       Port3   equ              0x2009C074
   44 00000000 2009C094 
                       Port4   equ              0x2009C094
   45 00000000         
   46 00000000         
   47 00000000         ;This sets the built in pull up resistor
   48 00000000 4002C040 
                       PinMode0
                               equ              0x4002C040
   49 00000000 4002C044 
                       PinMode1
                               equ              0x4002C044
   50 00000000 4002C048 
                       PinMode2
                               equ              0x4002C048
   51 00000000 4002C04C 
                       PinMode3
                               equ              0x4002C04C
   52 00000000 4002C050 
                       PinMode4
                               equ              0x4002C050
   53 00000000 4002C054 
                       PinMode5
                               equ              0x4002C054
   54 00000000 4002C058 
                       PinMode6
                               equ              0x4002C058
   55 00000000 4002C05C 
                       PinMode7
                               equ              0x4002C05C
   56 00000000 4002C060 
                       PinMode8
                               equ              0x4002C060
   57 00000000 4002C064 
                       PinMode9
                               equ              0x4002C064



ARM Macro Assembler    Page 3 


   58 00000000         
   59 00000000         
   60 00000000         
   61 00000000         
   62 00000000                 MACRO
   63 00000000                 WRITEBITS        $BITS_TO_WRITE,$REGISTER_ADDY
   64 00000000                 MOV              R1,$BITS_TO_WRITE
   65 00000000                 LDR              R0,=$REGISTER_ADDY
   66 00000000                 STR              R1,[R0]
   67 00000000                 MEND
   68 00000000         
   69 00000000                 MACRO
   70 00000000                 SETBITS          $BITS_TO_SET,$REG_ADDY
   71 00000000                 LDR              R0,=$REG_ADDY
   72 00000000                 LDR              R1,[R0]
   73 00000000                 ORR              R1,R1,$BITS_TO_SET
   74 00000000                 STR              R1,[R0]
   75 00000000                 MEND
   76 00000000         
   77 00000000                 MACRO                        ;ME SMASHY R0,R1.
   78 00000000                 CLEARBITS        $BITS_TO_CLEAR,$REG_ADDY
   79 00000000                 LDR              R0,=$REG_ADDY
   80 00000000                 LDR              R1,[R0]
   81 00000000                 BIC              R1,R1,$BITS_TO_CLEAR
   82 00000000                 STR              R1,[R0]
   83 00000000                 MEND
   84 00000000         
   85 00000000         
   86 00000000         
   87 00000000         ;Not used
   88 00000000 2009C018 
                       FIOSET0 equ              0x2009C018
   89 00000000 2009C038 
                       FIOSET1 equ              0x2009C038
   90 00000000 2009C058 
                       FIOSET2 equ              0x2009C058
   91 00000000 2009C078 
                       FIOSET3 equ              0x2009C078
   92 00000000 2009C098 
                       FIOSET4 equ              0x2009C098
   93 00000000         
   94 00000000 2009C01C 
                       FIOCLR0 equ              0x2009C01C
   95 00000000 2009C03C 
                       FIOCLR1 equ              0x2009C03C
   96 00000000 2009C05C 
                       FIOCLR2 equ              0x2009C05C
   97 00000000 2009C07C 
                       FIOCLR3 equ              0x2009C07C
   98 00000000 2009C09C 
                       FIOCLR4 equ              0x2009C09C
   99 00000000         
  100 00000000         ;AREA DATAAREA, DATA ; HEY, ASSEMBLER: GIMME 16 bytes SP
                       ACE IN DATA MEMORY
  101 00000000         
  102 00000000                 END
    3 00000000         
    4 00000000 00000046 
                       BaseSpeed



ARM Macro Assembler    Page 4 


                               equ              70          ;we will use 50 for
                                                             now cos why not
    5 00000000 00000005 
                       TurnForwardSpeed
                               equ              5
    6 00000000 00000064 
                       TurnSpeed
                               equ              100
    7 00000000 00000001 
                       Factor  equ              1
    8 00000000 000003E8 
                       ForwardRange
                               equ              1000
    9 00000000 00000320 
                       AdjacentRange
                               equ              800         ;1000
   10 00000000 00001388 
                       Delay_Time
                               equ              5000
   11 00000000         
   12 00000000         
   13 00000000         ;We will be adjusting individual wheel speeds on the fly
                        to do the turning
   14 00000000         
   15 00000000         
   16 00000000         ;add a switch to decide to go lefr or right
   17 00000000         
   18 00000000                 GLOBAL           __main
   19 00000000                 AREA             Main, CODE, READONLY
   20 00000000                 ALIGN            2           ; MAKE SURE CODE DO
                                                            ESN'T START ON ODD 
                                                            BYTES
   21 00000000                 ENTRY
   22 00000000         
   23 00000000         
   24 00000000         __main
   25 00000000         
   26 00000000         ;these are the pins that control the motors. Set them to
                        output
   27 00000000 4899            ldr              r0,=DDR0
   28 00000002 F04F 010F       mov              r1,#2_1111
   29 00000006 6001            str              r1,[r0]
   30 00000008         
   31 00000008         
   32 00000008 F04F 0900       mov              r9,#0       ; we will store the
                                                             angle bias into r9
                                                            . This is a signed 
                                                            number
   33 0000000C         
   34 0000000C         
   35 0000000C F04F 0A00       mov              r10,#0      ; we will use this 
                                                            to see if we need t
                                                            o delay or not
   36 00000010         
   37 00000010         
   38 00000010         
   39 00000010         
   40 00000010         
   41 00000010 F000 F8BD       bl               INIT_PWM



ARM Macro Assembler    Page 5 


   42 00000014 F000 F8FF       bl               INIT_ADC
   43 00000018         
   44 00000018 F000 F805       bl               Read_Sensor ;we will do some co
                                                            nfiguration
   45 0000001C         
   46 0000001C         
   47 0000001C         
   48 0000001C         
   49 0000001C         ;r0 is my result register
   50 0000001C         
   51 0000001C         Handle_Input
   52 0000001C         
   53 0000001C F000 F803       bl               Read_Sensor
   54 00000020         
   55 00000020         
   56 00000020 F000 F860       bl               Process     ; we will have Proc
                                                            ess over here inste
                                                            ad
   57 00000024         
   58 00000024 E7FA            B                Handle_Input
   59 00000026         
   60 00000026         
   61 00000026         
   62 00000026         
   63 00000026         
   64 00000026         Read_Sensor                          ;r1 r2 r3
   65 00000026         
   66 00000026                 SETBITS          #1,Adcr0    ;read pin 0
   71 00000026 4891            LDR              R0,=Adcr0
   72 00000028 6801            LDR              R1,[R0]
   73 0000002A F041 0101       ORR              R1,R1,#1
   74 0000002E 6001            STR              R1,[R0]
   67 00000030                 CLEARBITS        #(2_11111110),Adcr0
   79 00000030 488E            LDR              R0,=Adcr0
   80 00000032 6801            LDR              R1,[R0]
   81 00000034 F021 01FE       BIC              R1,R1,#(2_11111110)
   82 00000038 6001            STR              R1,[R0]
   68 0000003A         
   69 0000003A                 SETBITS          #(1 << 24),Adcr0 ; START
   71 0000003A 488C            LDR              R0,=Adcr0
   72 0000003C 6801            LDR              R1,[R0]
   73 0000003E F041 7180       ORR              R1,R1,#(1 << 24)
   74 00000042 6001            STR              R1,[R0]
   70 00000044                 CLEARBITS        #(2_11 << 25),Adcr0
   79 00000044 4889            LDR              R0,=Adcr0
   80 00000046 6801            LDR              R1,[R0]
   81 00000048 F021 61C0       BIC              R1,R1,#(2_11 << 25)
   82 0000004C 6001            STR              R1,[R0]
   71 0000004E         
   72 0000004E         
   73 0000004E         ;load in the  ADGR register
   74 0000004E         
   75 0000004E 4888            LDR              R0,=Adgr
   76 00000050         
   77 00000050         
   78 00000050         ;check if conversion is complete
   79 00000050         Converting_Y                         ;Front
   80 00000050 6801            LDR              R1,[R0]
   81 00000052 F011 4F00       TST              R1,#(1 << 31)



ARM Macro Assembler    Page 6 


   82 00000056 D0FB            BEQ              Converting_Y
   83 00000058         
   84 00000058         
   85 00000058         
   86 00000058 B402            push             {r1}
   87 0000005A         
   88 0000005A         
   89 0000005A         Start_Converting_X                   ;Left
   90 0000005A         
   91 0000005A                 SETBITS          #2,Adcr0    ;read pin 0
   71 0000005A 4884            LDR              R0,=Adcr0
   72 0000005C 6801            LDR              R1,[R0]
   73 0000005E F041 0102       ORR              R1,R1,#2
   74 00000062 6001            STR              R1,[R0]
   92 00000064                 CLEARBITS        #(2_11111101),Adcr0
   79 00000064 4881            LDR              R0,=Adcr0
   80 00000066 6801            LDR              R1,[R0]
   81 00000068 F021 01FD       BIC              R1,R1,#(2_11111101)
   82 0000006C 6001            STR              R1,[R0]
   93 0000006E         
   94 0000006E                 SETBITS          #(1 << 24),Adcr0 ; START
   71 0000006E 487F            LDR              R0,=Adcr0
   72 00000070 6801            LDR              R1,[R0]
   73 00000072 F041 7180       ORR              R1,R1,#(1 << 24)
   74 00000076 6001            STR              R1,[R0]
   95 00000078                 CLEARBITS        #(2_11 << 25),Adcr0
   79 00000078 487C            LDR              R0,=Adcr0
   80 0000007A 6801            LDR              R1,[R0]
   81 0000007C F021 61C0       BIC              R1,R1,#(2_11 << 25)
   82 00000080 6001            STR              R1,[R0]
   96 00000082         ;load in the  ADGR register 
   97 00000082         
   98 00000082 487B            LDR              R0,=Adgr
   99 00000084         
  100 00000084         ;check if conversion is complete
  101 00000084         
  102 00000084         Converting_X
  103 00000084 6801            LDR              R1,[R0]
  104 00000086 F011 4F00       TST              R1,#(1 << 31)
  105 0000008A D0FB            BEQ              Converting_X
  106 0000008C         
  107 0000008C B402            push             {r1}
  108 0000008E         
  109 0000008E         Start_Converting_Z
  110 0000008E         
  111 0000008E                 SETBITS          #4,Adcr0    ;read pin 0
   71 0000008E 4877            LDR              R0,=Adcr0
   72 00000090 6801            LDR              R1,[R0]
   73 00000092 F041 0104       ORR              R1,R1,#4
   74 00000096 6001            STR              R1,[R0]
  112 00000098                 CLEARBITS        #(2_11111011),Adcr0
   79 00000098 4874            LDR              R0,=Adcr0
   80 0000009A 6801            LDR              R1,[R0]
   81 0000009C F021 01FB       BIC              R1,R1,#(2_11111011)
   82 000000A0 6001            STR              R1,[R0]
  113 000000A2         
  114 000000A2                 SETBITS          #(1 << 24),Adcr0 ; START
   71 000000A2 4872            LDR              R0,=Adcr0
   72 000000A4 6801            LDR              R1,[R0]



ARM Macro Assembler    Page 7 


   73 000000A6 F041 7180       ORR              R1,R1,#(1 << 24)
   74 000000AA 6001            STR              R1,[R0]
  115 000000AC                 CLEARBITS        #(2_11 << 25),Adcr0
   79 000000AC 486F            LDR              R0,=Adcr0
   80 000000AE 6801            LDR              R1,[R0]
   81 000000B0 F021 61C0       BIC              R1,R1,#(2_11 << 25)
   82 000000B4 6001            STR              R1,[R0]
  116 000000B6         
  117 000000B6         
  118 000000B6 486E            LDR              R0,=Adgr
  119 000000B8         
  120 000000B8         Converting_Z                         ;FIXME:Right  We ca
                                                            nnot seem to read f
                                                            rom here
  121 000000B8         
  122 000000B8 6801            LDR              R1,[R0]
  123 000000BA F011 4F00       TST              R1,#(1 << 31)
  124 000000BE D0FB            BEQ              Converting_Z
  125 000000C0         
  126 000000C0 B402            push             {r1}
  127 000000C2         
  128 000000C2         ;format the results r1 r2 r3
  129 000000C2         
  130 000000C2         ;result is in r1
  131 000000C2         
  132 000000C2         ;shift the result right by 4
  133 000000C2         ;clear all other bits
  134 000000C2         
  135 000000C2 BC08            pop              {r3}
  136 000000C4 BC04            pop              {r2}
  137 000000C6 BC02            pop              {r1}
  138 000000C8         
  139 000000C8 4C6A            ldr              r4,=0xFFFFF000
  140 000000CA         
  141 000000CA EA4F 1121       ASR              r1,#4
  142 000000CE EA21 0104       BIC              r1,r4       ;#2_1111 1111 1111 
                                                            1111 1111 0000 0000
                                                             0000
  143 000000D2         
  144 000000D2 EA4F 1222       ASR              r2,#4
  145 000000D6 EA22 0204       BIC              r2,r4
  146 000000DA         
  147 000000DA EA4F 1323       ASR              r3,#4
  148 000000DE EA23 0304       BIC              r3,r4
  149 000000E2         
  150 000000E2         
  151 000000E2         
  152 000000E2 4770            bx               lr
  153 000000E4         
  154 000000E4         
  155 000000E4         
  156 000000E4         
  157 000000E4         
  158 000000E4         Process                              ; add correction
  159 000000E4         
  160 000000E4         ;r1 r2 and r3 are reserved  (Fs Ls Rs)
  161 000000E4         
  162 000000E4 B500            push             {lr}
  163 000000E6         



ARM Macro Assembler    Page 8 


  164 000000E6 EBA2 0403       sub              r4,r2,r3    ; L - R
  165 000000EA         
  166 000000EA 4D63            ldr              r5,=-AdjacentRange ;-2099  
  167 000000EC 42AC            cmp              r4,r5
  168 000000EE D504            bpl              Right_Forward
  169 000000F0         
  170 000000F0         Go_Left_Delay
  171 000000F0 F241 3A88       ldr              r10,=Delay_Time
  172 000000F4         
  173 000000F4         Go_Left                              ; r4 < -1000, go le
                                                            ft
  174 000000F4 F000 F82D       bl               Left
  175 000000F8 E018            b                Process_Exit
  176 000000FA         
  177 000000FA         Right_Forward
  178 000000FA         
  179 000000FA F44F 7548       mov              r5,#AdjacentRange ;1900
  180 000000FE 42AC            cmp              r4,r5
  181 00000100 D404            bmi              Forward_Correct
  182 00000102         
  183 00000102         
  184 00000102 F241 3A88       ldr              r10,=Delay_Time
  185 00000106         
  186 00000106         Go_Right
  187 00000106 F000 F833       bl               Right       ; r4 >= 1000, go ri
                                                            ght
  188 0000010A E00F            b                Process_Exit
  189 0000010C         
  190 0000010C         Forward_Correct
  191 0000010C         
  192 0000010C         
  193 0000010C F5B1 7F7A       cmp              r1,#ForwardRange
  194 00000110 D5EE            bpl              Go_Left_Delay ; go left if ther
                                                            e is something too 
                                                            close to the front 
                                                            of us
  195 00000112         
  196 00000112 4648            mov              r0,r9       ;no correction, go 
                                                            forward
  197 00000114 B140            cbz              r0,Go_Forward
  198 00000116         
  199 00000116 F1BA 0F00       cmp              r10,#0      ;delay flag set, go
                                                             forward
  200 0000011A D103            bne              Delay_Forward
  201 0000011C         
  202 0000011C F1B9 0F00       cmp              r9,#0       ; biased to right, 
                                                            correct left
  203 00000120 D5E8            bpl              Go_Left
  204 00000122         
  205 00000122         
  206 00000122 E7F0            b                Go_Right    ;biased to left, co
                                                            rrect right
  207 00000124         
  208 00000124         Delay_Forward
  209 00000124         
  210 00000124 F1AA 0A01       sub              r10,#1
  211 00000128         
  212 00000128         Go_Forward
  213 00000128 F000 F808       bl               Forward



ARM Macro Assembler    Page 9 


  214 0000012C         
  215 0000012C         
  216 0000012C         Process_Exit
  217 0000012C         
  218 0000012C F85D EB04       pop              {lr}        ;restore return add
                                                            ress
  219 00000130         
  220 00000130         
  221 00000130                 SETBITS          #2_111,LoadEnabler 
                                                            ; latch the results
                                                            
   71 00000130 4852            LDR              R0,=LoadEnabler
   72 00000132 6801            LDR              R1,[R0]
   73 00000134 F041 0107       ORR              R1,R1,#2_111
   74 00000138 6001            STR              R1,[R0]
  222 0000013A         
  223 0000013A 4770            bx               lr
  224 0000013C         
  225 0000013C         
  226 0000013C         Forward
  227 0000013C         
  228 0000013C 4850            ldr              r0,=Port0
  229 0000013E F04F 010A       mov              r1,#2_1010  ;#2_0101
  230 00000142 6001            str              r1,[r0]
  231 00000144         
  232 00000144         
  233 00000144         ;reset to the base speed
  234 00000144 484F            ldr              r0,= Match1
  235 00000146 F04F 0146       mov              r1, #BaseSpeed
  236 0000014A 6001            str              r1,[r0]
  237 0000014C         
  238 0000014C 484E            ldr              r0,=Match2
  239 0000014E 6001            str              r1,[r0]
  240 00000150         
  241 00000150 4770            bx               lr
  242 00000152         
  243 00000152         Left
  244 00000152         
  245 00000152 484B            ldr              r0,=Port0
  246 00000154 F04F 010A       mov              r1,#2_1010  ;#2_0101
  247 00000158 6001            str              r1,[r0]
  248 0000015A         
  249 0000015A         
  250 0000015A         ;reset to the base speed
  251 0000015A 484A            ldr              r0,= Match1
  252 0000015C F04F 0105       mov              r1, #TurnForwardSpeed
  253 00000160 6001            str              r1,[r0]
  254 00000162         
  255 00000162 4849            ldr              r0,=Match2
  256 00000164 F101 0164       add              r1, #TurnSpeed
  257 00000168 6001            str              r1,[r0]
  258 0000016A         
  259 0000016A F1A9 0901       sub              r9,#1
  260 0000016E         
  261 0000016E 4770            bx               lr
  262 00000170         
  263 00000170         Right
  264 00000170         
  265 00000170 4843            ldr              r0,=Port0



ARM Macro Assembler    Page 10 


  266 00000172 F04F 010A       mov              r1,#2_1010  ;#2_0101
  267 00000176 6001            str              r1,[r0]
  268 00000178         
  269 00000178         
  270 00000178         ;reset to the base speed
  271 00000178 4842            ldr              r0,= Match1
  272 0000017A F04F 0164       mov              r1, #TurnSpeed
  273 0000017E 6001            str              r1,[r0]
  274 00000180         
  275 00000180 4841            ldr              r0,=Match2
  276 00000182 F04F 0105       mov              r1, #TurnForwardSpeed
  277 00000186 6001            str              r1,[r0]
  278 00000188         
  279 00000188 F109 0901       add              r9,#1
  280 0000018C         
  281 0000018C 4770            bx               lr
  282 0000018E         
  283 0000018E         
  284 0000018E         
  285 0000018E         
  286 0000018E         ;--------------Init stuff. This will be here untiil I fi
                       gure out how this assembler works-----------------------
                       --------
  287 0000018E         
  288 0000018E         
  289 0000018E         
  290 0000018E         ;NOTE: This should be fixed now. Please check
  291 0000018E         
  292 0000018E         ;we need to switch on the pwm. Get this done I guess  (p
                       2.0 and p2.1)
  293 0000018E         
  294 0000018E         INIT_PWM
  295 0000018E                 SETBITS          #2_1000000,Pconp ;PWM POWER ON
   71 0000018E 483F            LDR              R0,=Pconp
   72 00000190 6801            LDR              R1,[R0]
   73 00000192 F041 0140       ORR              R1,R1,#2_1000000
   74 00000196 6001            STR              R1,[R0]
  296 00000198         
  297 00000198         
  298 00000198         ; 2. Reset and hold the PWM module  Set bit 1 at 0x4001 
                       8004.  (Timer Control Register)
  299 00000198                 SETBITS          #2_10,Tcr
   71 00000198 483D            LDR              R0,=Tcr
   72 0000019A 6801            LDR              R1,[R0]
   73 0000019C F041 0102       ORR              R1,R1,#2_10
   74 000001A0 6001            STR              R1,[R0]
  300 000001A2         
  301 000001A2         
  302 000001A2         ;3. Peripheral clock: In the PCLKSEL0 register (Table 40
                       ), select PCLK_PWM1.  Set bit 12 at 0x400F C1A8 (Clock i
                       nput to PWM 1:1)
  303 000001A2                 SETBITS          #0X1000,PclkSel0 ; (basically 1
                                                             << 12)
   71 000001A2 483C            LDR              R0,=PclkSel0
   72 000001A4 6801            LDR              R1,[R0]
   73 000001A6 F441 5180       ORR              R1,R1,#0X1000
   74 000001AA 6001            STR              R1,[R0]
  304 000001AC         
  305 000001AC         



ARM Macro Assembler    Page 11 


  306 000001AC         ;4. Pins: Select which pin the PWM1 attaches to through 
                       the PINSEL registers. Attach PWM1 to P2[0] where our spe
                       aker is.  PINSEL4, that is, 0x4002 C010 should have its 
                       least significant bits set to 01.
  307 000001AC                 SETBITS          #0101,PinSel4 ;sets pins 2.0 an
                                                            d 2.1 to pwm
   71 000001AC 483A            LDR              R0,=PinSel4
   72 000001AE 6801            LDR              R1,[R0]
   73 000001B0 F041 0165       ORR              R1,R1,#0101
   74 000001B4 6001            STR              R1,[R0]
  308 000001B6                 CLEARBITS        #2_1010,PinSel4 ;NOT EFFICIENT
   79 000001B6 4838            LDR              R0,=PinSel4
   80 000001B8 6801            LDR              R1,[R0]
   81 000001BA F021 010A       BIC              R1,R1,#2_1010
   82 000001BE 6001            STR              R1,[R0]
  309 000001C0         
  310 000001C0         
  311 000001C0         ;5. Select pin modes for port pins with PWM1 functions t
                       hrough the PINMODE registers (Section 8.5). PINMODE4, se
                       nd Binary LSB 10 to 0x4002C050 so that the pin has neith
                       er a pull-up nor a pull-down resistor attached to it.
  312 000001C0                 WRITEBITS        #2_1010,PinMode4 ;write 10
   64 000001C0 F04F 010A       MOV              R1,#2_1010
   65 000001C4 4835            LDR              R0,=PinMode4
   66 000001C6 6001            STR              R1,[R0]
  313 000001C8         
  314 000001C8         
  315 000001C8         ;Now to set up the Period, Pulse Width, and finally enab
                       le PWM output.
  316 000001C8         ;6. Attach the system clock ->prescaler -> PWM -- write 
                       0x00000000 to the CounT Control Register (0x4001 8070).
  317 000001C8                 WRITEBITS        #0,CounterTimercr
   64 000001C8 F04F 0100       MOV              R1,#0
   65 000001CC 4834            LDR              R0,=CounterTimercr
   66 000001CE 6001            STR              R1,[R0]
  318 000001D0         
  319 000001D0         
  320 000001D0         ;7. Set up the prescaler to count every 250 clock cycles
                        by storing 250 to the address of the Prescale Register 
                       (0x4001 800C)
  321 000001D0         
  322 000001D0         
  323 000001D0         ;WRITEBITS #249,Prescaler
  324 000001D0         
  325 000001D0                 WRITEBITS        #(0xF << 10),Prescaler
   64 000001D0 F44F 5170       MOV              R1,#(0xF << 10)
   65 000001D4 4833            LDR              R0,=Prescaler
   66 000001D6 6001            STR              R1,[R0]
  326 000001D8         
  327 000001D8         
  328 000001D8         ;8. Set the PWM to reset when it reaches 100 counts by: 
                       (A) storing 100 in PWM1 Match Register 0 (0x4001 8018)
  329 000001D8                 WRITEBITS        #100,Match0
   64 000001D8 F04F 0164       MOV              R1,#100
   65 000001DC 4832            LDR              R0,=Match0
   66 000001DE 6001            STR              R1,[R0]
  330 000001E0         
  331 000001E0         
  332 000001E0         ;9. Tell the PWM to turn off output when it reaches 50 b



ARM Macro Assembler    Page 12 


                       y storing 50 in PWM1MatchRegister 1 (0x4001 801C)
  333 000001E0                 WRITEBITS        #50,Match1
   64 000001E0 F04F 0132       MOV              R1,#50
   65 000001E4 4827            LDR              R0,=Match1
   66 000001E6 6001            STR              R1,[R0]
  334 000001E8                 WRITEBITS        #50,Match2  ;And PWM1MatchRegis
                                                            ter 2
   64 000001E8 F04F 0132       MOV              R1,#50
   65 000001EC 4826            LDR              R0,=Match2
   66 000001EE 6001            STR              R1,[R0]
  335 000001F0         
  336 000001F0         
  337 000001F0         ;10. (B)Update the PWM timing with Match0 and Match1  by
                        "latching" them in: load 11 to the LSB of (0x4001 8050)
                       
  338 000001F0         
  339 000001F0                 SETBITS          #2_111,LoadEnabler ;latch m0 m1
                                                             and m2 ;LoadEnable
                                                            r allows the values
                                                             written in match r
                                                            egisters to take af
                                                            fect in the next cl
                                                            ock cycle
   71 000001F0 4822            LDR              R0,=LoadEnabler
   72 000001F2 6801            LDR              R1,[R0]
   73 000001F4 F041 0107       ORR              R1,R1,#2_111
   74 000001F8 6001            STR              R1,[R0]
  340 000001FA         
  341 000001FA         
  342 000001FA         ;SETBITS #2_1111,LoadEnabler;And Match2 and Match3
  343 000001FA         
  344 000001FA         
  345 000001FA         ;11. (C)Make Match0 reset the PWM (Match0 is period) by 
                       sending #2_00010 to MatchControlReg (0x4001 8014)
  346 000001FA         
  347 000001FA                 WRITEBITS        #2,Matchcr
   64 000001FA F04F 0102       MOV              R1,#2
   65 000001FE 482B            LDR              R0,=Matchcr
   66 00000200 6001            STR              R1,[R0]
  348 00000202         
  349 00000202         
  350 00000202         
  351 00000202         ;WRITEBITS #2_00010010,Matchcr
  352 00000202         
  353 00000202         
  354 00000202         ;12. Enable PWM1 to output using the PWM Control Registe
                       r by sending 1 to the 9th bit of (0x4001 804C) (you can 
                       store 0x00200)
  355 00000202                 SETBITS          #(3 << 9),PWMcr ;enable Match1 
                                                            and Match2 to outpu
                                                            t a pwm signal
   71 00000202 482B            LDR              R0,=PWMcr
   72 00000204 6801            LDR              R1,[R0]
   73 00000206 F441 61C0       ORR              R1,R1,#(3 << 9)
   74 0000020A 6001            STR              R1,[R0]
  356 0000020C         
  357 0000020C         
  358 0000020C         ;13. Start the timer that feeds the PWM by removing the 
                       reset, enabling and starting: send a #9 to the TimerCont



ARM Macro Assembler    Page 13 


                       rolReg(0x4001 8004)
  359 0000020C                 WRITEBITS        #2_1001,Tcr
   64 0000020C F04F 0109       MOV              R1,#2_1001
   65 00000210 481F            LDR              R0,=Tcr
   66 00000212 6001            STR              R1,[R0]
  360 00000214         
  361 00000214         
  362 00000214 4770            BX               LR
  363 00000216         
  364 00000216         
  365 00000216         
  366 00000216         INIT_ADC                             ;targeting pins : p
                                                            0.23 p0.24 p0.25  F
                                                            s Ls Rs
  367 00000216         ;enable adc in pconp
  368 00000216                 SETBITS          #(1 << 12),Pconp
   71 00000216 481D            LDR              R0,=Pconp
   72 00000218 6801            LDR              R1,[R0]
   73 0000021A F441 5180       ORR              R1,R1,#(1 << 12)
   74 0000021E 6001            STR              R1,[R0]
  369 00000220         
  370 00000220         
  371 00000220         ;enable adc in the ad0cr register
  372 00000220                 WRITEBITS        #(1 << 21),Adcr0
   64 00000220 F44F 1100       MOV              R1,#(1 << 21)
   65 00000224 4811            LDR              R0,=Adcr0
   66 00000226 6001            STR              R1,[R0]
  373 00000228         
  374 00000228         
  375 00000228         ;set the peripheral clock
  376 00000228                 SETBITS          #(2_11 << 24),PclkSel0
   71 00000228 481A            LDR              R0,=PclkSel0
   72 0000022A 6801            LDR              R1,[R0]
   73 0000022C F041 7140       ORR              R1,R1,#(2_11 << 24)
   74 00000230 6001            STR              R1,[R0]
  377 00000232                 SETBITS          #(1<<11),Adcr0 ; increase adc r
                                                            ead prescale by 8
   71 00000232 480E            LDR              R0,=Adcr0
   72 00000234 6801            LDR              R1,[R0]
   73 00000236 F441 6100       ORR              R1,R1,#(1<<11)
   74 0000023A 6001            STR              R1,[R0]
  378 0000023C         
  379 0000023C         ;set the pimode-PINSEL to adc (i think the problem was h
                       ere. Actually, it is)
  380 0000023C         
  381 0000023C                 CLEARBITS        #(2_111111 << 14),PinSel1
   79 0000023C 481D            LDR              R0,=PinSel1
   80 0000023E 6801            LDR              R1,[R0]
   81 00000240 F421 217C       BIC              R1,R1,#(2_111111 << 14)
   82 00000244 6001            STR              R1,[R0]
  382 00000246                 SETBITS          #(2_010101 << 14),PinSel1 
                                                            ;2_0101
   71 00000246 481B            LDR              R0,=PinSel1
   72 00000248 6801            LDR              R1,[R0]
   73 0000024A F441 21A8       ORR              R1,R1,#(2_010101 << 14)
   74 0000024E 6001            STR              R1,[R0]
  383 00000250         
  384 00000250         
  385 00000250         ;No pullup no pull down



ARM Macro Assembler    Page 14 


  386 00000250         
  387 00000250         
  388 00000250                 CLEARBITS        #(2_111111 << 14),PinMode1
   79 00000250 4819            LDR              R0,=PinMode1
   80 00000252 6801            LDR              R1,[R0]
   81 00000254 F421 217C       BIC              R1,R1,#(2_111111 << 14)
   82 00000258 6001            STR              R1,[R0]
  389 0000025A                 SETBITS          #(2_101010 << 14),PinMode1 ;#0x
                                                            A8000      ;#0x2800
                                                            0
   71 0000025A 4817            LDR              R0,=PinMode1
   72 0000025C 6801            LDR              R1,[R0]
   73 0000025E F441 2128       ORR              R1,R1,#(2_101010 << 14)
   74 00000262 6001            STR              R1,[R0]
  390 00000264         
  391 00000264         
  392 00000264         
  393 00000264         
  394 00000264         
  395 00000264         
  396 00000264 4770            BX               LR
  397 00000266         
  398 00000266         
  399 00000266                 END
              00 00 2009C000 
              40034000 
              40034004 
              FFFFF000 
              FFFFFCE0 
              40018050 
              2009C014 
              4001801C 
              40018020 
              400FC0C4 
              40018004 
              400FC1A8 
              4002C010 
              4002C050 
              40018070 
              4001800C 
              40018018 
              40018014 
              4001804C 
              4002C004 
              4002C044 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -II:\cs100-tank\RTE -II:\cs100
-tank\RTE\Device\LPC1769 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.4.0\CMSIS\Include -I
C:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.1.0\Device\Include --predefine="__EVAL S
ETA 1" --predefine="__UVISION_VERSION SETA 516" --predefine="_RTE_ SETA 1" --pr
edefine="LPC175x_6x SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Converting_X 00000084

Symbol: Converting_X
   Definitions
      At line 102 in file main.s
   Uses
      At line 105 in file main.s
Comment: Converting_X used once
Converting_Y 00000050

Symbol: Converting_Y
   Definitions
      At line 79 in file main.s
   Uses
      At line 82 in file main.s
Comment: Converting_Y used once
Converting_Z 000000B8

Symbol: Converting_Z
   Definitions
      At line 120 in file main.s
   Uses
      At line 124 in file main.s
Comment: Converting_Z used once
Delay_Forward 00000124

Symbol: Delay_Forward
   Definitions
      At line 208 in file main.s
   Uses
      At line 200 in file main.s
Comment: Delay_Forward used once
Forward 0000013C

Symbol: Forward
   Definitions
      At line 226 in file main.s
   Uses
      At line 213 in file main.s
Comment: Forward used once
Forward_Correct 0000010C

Symbol: Forward_Correct
   Definitions
      At line 190 in file main.s
   Uses
      At line 181 in file main.s
Comment: Forward_Correct used once
Go_Forward 00000128

Symbol: Go_Forward
   Definitions
      At line 212 in file main.s
   Uses
      At line 197 in file main.s
Comment: Go_Forward used once
Go_Left 000000F4

Symbol: Go_Left



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 173 in file main.s
   Uses
      At line 203 in file main.s
Comment: Go_Left used once
Go_Left_Delay 000000F0

Symbol: Go_Left_Delay
   Definitions
      At line 170 in file main.s
   Uses
      At line 194 in file main.s
Comment: Go_Left_Delay used once
Go_Right 00000106

Symbol: Go_Right
   Definitions
      At line 186 in file main.s
   Uses
      At line 206 in file main.s
Comment: Go_Right used once
Handle_Input 0000001C

Symbol: Handle_Input
   Definitions
      At line 51 in file main.s
   Uses
      At line 58 in file main.s
Comment: Handle_Input used once
INIT_ADC 00000216

Symbol: INIT_ADC
   Definitions
      At line 366 in file main.s
   Uses
      At line 42 in file main.s
Comment: INIT_ADC used once
INIT_PWM 0000018E

Symbol: INIT_PWM
   Definitions
      At line 294 in file main.s
   Uses
      At line 41 in file main.s
Comment: INIT_PWM used once
Left 00000152

Symbol: Left
   Definitions
      At line 243 in file main.s
   Uses
      At line 174 in file main.s
Comment: Left used once
Main 00000000

Symbol: Main
   Definitions
      At line 19 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: Main unused
Process 000000E4

Symbol: Process
   Definitions
      At line 158 in file main.s
   Uses
      At line 56 in file main.s
Comment: Process used once
Process_Exit 0000012C

Symbol: Process_Exit
   Definitions
      At line 216 in file main.s
   Uses
      At line 175 in file main.s
      At line 188 in file main.s

Read_Sensor 00000026

Symbol: Read_Sensor
   Definitions
      At line 64 in file main.s
   Uses
      At line 44 in file main.s
      At line 53 in file main.s

Right 00000170

Symbol: Right
   Definitions
      At line 263 in file main.s
   Uses
      At line 187 in file main.s
Comment: Right used once
Right_Forward 000000FA

Symbol: Right_Forward
   Definitions
      At line 177 in file main.s
   Uses
      At line 168 in file main.s
Comment: Right_Forward used once
Start_Converting_X 0000005A

Symbol: Start_Converting_X
   Definitions
      At line 89 in file main.s
   Uses
      None
Comment: Start_Converting_X unused
Start_Converting_Z 0000008E

Symbol: Start_Converting_Z
   Definitions
      At line 109 in file main.s
   Uses
      None



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: Start_Converting_Z unused
__main 00000000

Symbol: __main
   Definitions
      At line 24 in file main.s
   Uses
      At line 18 in file main.s
Comment: __main used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Adcr0 40034000

Symbol: Adcr0
   Definitions
      At line 7 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 66 in file main.s
      At line 79 in macro CLEARBITS
      at line 67 in file main.s
      At line 65 in macro WRITEBITS
      at line 372 in file main.s

Adgr 40034004

Symbol: Adgr
   Definitions
      At line 8 in file include.s
   Uses
      At line 75 in file main.s
      At line 98 in file main.s
      At line 118 in file main.s

AdjacentRange 00000320

Symbol: AdjacentRange
   Definitions
      At line 9 in file main.s
   Uses
      At line 166 in file main.s
      At line 179 in file main.s

BaseSpeed 00000046

Symbol: BaseSpeed
   Definitions
      At line 4 in file main.s
   Uses
      At line 235 in file main.s
Comment: BaseSpeed used once
CounterTimercr 40018070

Symbol: CounterTimercr
   Definitions
      At line 11 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 317 in file main.s
Comment: CounterTimercr used once
DDR0 2009C000

Symbol: DDR0
   Definitions
      At line 31 in file include.s
   Uses
      At line 27 in file main.s
Comment: DDR0 used once
DDR1 2009C020




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: DDR1
   Definitions
      At line 32 in file include.s
   Uses
      None
Comment: DDR1 unused
DDR2 2009C040

Symbol: DDR2
   Definitions
      At line 33 in file include.s
   Uses
      None
Comment: DDR2 unused
DDR3 2009C060

Symbol: DDR3
   Definitions
      At line 34 in file include.s
   Uses
      None
Comment: DDR3 unused
DDR4 2009C080

Symbol: DDR4
   Definitions
      At line 35 in file include.s
   Uses
      None
Comment: DDR4 unused
Delay_Time 00001388

Symbol: Delay_Time
   Definitions
      At line 10 in file main.s
   Uses
      At line 171 in file main.s
      At line 184 in file main.s

FIOCLR0 2009C01C

Symbol: FIOCLR0
   Definitions
      At line 94 in file include.s
   Uses
      None
Comment: FIOCLR0 unused
FIOCLR1 2009C03C

Symbol: FIOCLR1
   Definitions
      At line 95 in file include.s
   Uses
      None
Comment: FIOCLR1 unused
FIOCLR2 2009C05C

Symbol: FIOCLR2
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 96 in file include.s
   Uses
      None
Comment: FIOCLR2 unused
FIOCLR3 2009C07C

Symbol: FIOCLR3
   Definitions
      At line 97 in file include.s
   Uses
      None
Comment: FIOCLR3 unused
FIOCLR4 2009C09C

Symbol: FIOCLR4
   Definitions
      At line 98 in file include.s
   Uses
      None
Comment: FIOCLR4 unused
FIOSET0 2009C018

Symbol: FIOSET0
   Definitions
      At line 88 in file include.s
   Uses
      None
Comment: FIOSET0 unused
FIOSET1 2009C038

Symbol: FIOSET1
   Definitions
      At line 89 in file include.s
   Uses
      None
Comment: FIOSET1 unused
FIOSET2 2009C058

Symbol: FIOSET2
   Definitions
      At line 90 in file include.s
   Uses
      None
Comment: FIOSET2 unused
FIOSET3 2009C078

Symbol: FIOSET3
   Definitions
      At line 91 in file include.s
   Uses
      None
Comment: FIOSET3 unused
FIOSET4 2009C098

Symbol: FIOSET4
   Definitions
      At line 92 in file include.s
   Uses
      None



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Comment: FIOSET4 unused
Factor 00000001

Symbol: Factor
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: Factor unused
ForwardRange 000003E8

Symbol: ForwardRange
   Definitions
      At line 8 in file main.s
   Uses
      At line 193 in file main.s
Comment: ForwardRange used once
LoadEnabler 40018050

Symbol: LoadEnabler
   Definitions
      At line 12 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 221 in file main.s
Comment: LoadEnabler used once
Match0 40018018

Symbol: Match0
   Definitions
      At line 3 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 329 in file main.s
Comment: Match0 used once
Match1 4001801C

Symbol: Match1
   Definitions
      At line 4 in file include.s
   Uses
      At line 234 in file main.s
      At line 251 in file main.s
      At line 271 in file main.s
      At line 65 in macro WRITEBITS
      at line 333 in file main.s

Match2 40018020

Symbol: Match2
   Definitions
      At line 5 in file include.s
   Uses
      At line 238 in file main.s
      At line 255 in file main.s
      At line 275 in file main.s
      At line 65 in macro WRITEBITS
      at line 334 in file main.s




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Matchcr 40018014

Symbol: Matchcr
   Definitions
      At line 13 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 347 in file main.s
Comment: Matchcr used once
PWMcr 4001804C

Symbol: PWMcr
   Definitions
      At line 14 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 355 in file main.s
Comment: PWMcr used once
PclkSel0 400FC1A8

Symbol: PclkSel0
   Definitions
      At line 10 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 303 in file main.s
Comment: PclkSel0 used once
Pconp 400FC0C4

Symbol: Pconp
   Definitions
      At line 6 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 295 in file main.s
Comment: Pconp used once
PinMode0 4002C040

Symbol: PinMode0
   Definitions
      At line 48 in file include.s
   Uses
      None
Comment: PinMode0 unused
PinMode1 4002C044

Symbol: PinMode1
   Definitions
      At line 49 in file include.s
   Uses
      At line 79 in macro CLEARBITS
      at line 388 in file main.s
      At line 71 in macro SETBITS
      at line 389 in file main.s

PinMode2 4002C048

Symbol: PinMode2
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 50 in file include.s
   Uses
      None
Comment: PinMode2 unused
PinMode3 4002C04C

Symbol: PinMode3
   Definitions
      At line 51 in file include.s
   Uses
      None
Comment: PinMode3 unused
PinMode4 4002C050

Symbol: PinMode4
   Definitions
      At line 52 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 312 in file main.s
Comment: PinMode4 used once
PinMode5 4002C054

Symbol: PinMode5
   Definitions
      At line 53 in file include.s
   Uses
      None
Comment: PinMode5 unused
PinMode6 4002C058

Symbol: PinMode6
   Definitions
      At line 54 in file include.s
   Uses
      None
Comment: PinMode6 unused
PinMode7 4002C05C

Symbol: PinMode7
   Definitions
      At line 55 in file include.s
   Uses
      None
Comment: PinMode7 unused
PinMode8 4002C060

Symbol: PinMode8
   Definitions
      At line 56 in file include.s
   Uses
      None
Comment: PinMode8 unused
PinMode9 4002C064

Symbol: PinMode9
   Definitions
      At line 57 in file include.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      None
Comment: PinMode9 unused
PinSel0 4002C000

Symbol: PinSel0
   Definitions
      At line 19 in file include.s
   Uses
      None
Comment: PinSel0 unused
PinSel1 4002C004

Symbol: PinSel1
   Definitions
      At line 20 in file include.s
   Uses
      At line 79 in macro CLEARBITS
      at line 381 in file main.s
      At line 71 in macro SETBITS
      at line 382 in file main.s

PinSel10 4002C028

Symbol: PinSel10
   Definitions
      At line 27 in file include.s
   Uses
      None
Comment: PinSel10 unused
PinSel2 4002C008

Symbol: PinSel2
   Definitions
      At line 21 in file include.s
   Uses
      None
Comment: PinSel2 unused
PinSel3 4002C00C

Symbol: PinSel3
   Definitions
      At line 22 in file include.s
   Uses
      None
Comment: PinSel3 unused
PinSel4 4002C010

Symbol: PinSel4
   Definitions
      At line 23 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 307 in file main.s
      At line 79 in macro CLEARBITS
      at line 308 in file main.s

PinSel7 4002C01C

Symbol: PinSel7



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 24 in file include.s
   Uses
      None
Comment: PinSel7 unused
PinSel8 4002C020

Symbol: PinSel8
   Definitions
      At line 25 in file include.s
   Uses
      None
Comment: PinSel8 unused
PinSel9 4002C024

Symbol: PinSel9
   Definitions
      At line 26 in file include.s
   Uses
      None
Comment: PinSel9 unused
Port0 2009C014

Symbol: Port0
   Definitions
      At line 40 in file include.s
   Uses
      At line 228 in file main.s
      At line 245 in file main.s
      At line 265 in file main.s

Port1 2009C034

Symbol: Port1
   Definitions
      At line 41 in file include.s
   Uses
      None
Comment: Port1 unused
Port2 2009C054

Symbol: Port2
   Definitions
      At line 42 in file include.s
   Uses
      None
Comment: Port2 unused
Port3 2009C074

Symbol: Port3
   Definitions
      At line 43 in file include.s
   Uses
      None
Comment: Port3 unused
Port4 2009C094

Symbol: Port4
   Definitions



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

      At line 44 in file include.s
   Uses
      None
Comment: Port4 unused
Prescaler 4001800C

Symbol: Prescaler
   Definitions
      At line 2 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 325 in file main.s
Comment: Prescaler used once
Tcr 40018004

Symbol: Tcr
   Definitions
      At line 9 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 299 in file main.s
      At line 65 in macro WRITEBITS
      at line 359 in file main.s

TurnForwardSpeed 00000005

Symbol: TurnForwardSpeed
   Definitions
      At line 5 in file main.s
   Uses
      At line 252 in file main.s
      At line 276 in file main.s

TurnSpeed 00000064

Symbol: TurnSpeed
   Definitions
      At line 6 in file main.s
   Uses
      At line 256 in file main.s
      At line 272 in file main.s

59 symbols
418 symbols in table
