


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 INCLUDE          include.s
    1 00000000         
    2 00000000 4001800C 
                       Prescaler
                               equ              0X4001800C
    3 00000000 40018018 
                       Match0  equ              0X40018018
    4 00000000 4001801C 
                       Match1  equ              0X4001801C
    5 00000000 40018020 
                       Match2  equ              0X40018020
    6 00000000 400FC0C4 
                       Pconp   equ              0x400FC0C4
    7 00000000 40034000 
                       Adcr0   equ              0x40034000
    8 00000000 40034004 
                       Adgr    equ              0x40034004
    9 00000000 40018004 
                       Tcr     equ              0x40018004
   10 00000000 400FC1A8 
                       PclkSel0
                               equ              0x400FC1A8
   11 00000000 40018070 
                       CounterTimercr
                               equ              0x40018070  ;selects either tim
                                                            er or counter
   12 00000000 40018050 
                       LoadEnabler
                               equ              0X40018050  ; enables pwm match
                                                             registers
   13 00000000 40018014 
                       Matchcr equ              0x40018014
   14 00000000 4001804C 
                       PWMcr   equ              0x4001804C
   15 00000000         
   16 00000000         
   17 00000000         
   18 00000000         ;Pin select register
   19 00000000 4002C000 
                       PinSel0 equ              0x4002C000
   20 00000000 4002C004 
                       PinSel1 equ              0x4002C004
   21 00000000 4002C008 
                       PinSel2 equ              0x4002C008
   22 00000000 4002C00C 
                       PinSel3 equ              0x4002C00C
   23 00000000 4002C010 
                       PinSel4 equ              0x4002C010
   24 00000000 4002C01C 
                       PinSel7 equ              0x4002C01C
   25 00000000 4002C020 
                       PinSel8 equ              0x4002C020
   26 00000000 4002C024 
                       PinSel9 equ              0x4002C024
   27 00000000 4002C028 
                       PinSel10
                               equ              0x4002C028
   28 00000000         



ARM Macro Assembler    Page 2 


   29 00000000         
   30 00000000         ;This acts like a DDR
   31 00000000 2009C000 
                       DDR0    equ              0x2009C000
   32 00000000 2009C020 
                       DDR1    equ              0x2009C020
   33 00000000 2009C040 
                       DDR2    equ              0x2009C040
   34 00000000 2009C060 
                       DDR3    equ              0x2009C060
   35 00000000 2009C080 
                       DDR4    equ              0x2009C080
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         ;This acts like PORT
   40 00000000 2009C014 
                       Port0   equ              0x2009C014
   41 00000000 2009C034 
                       Port1   equ              0x2009C034
   42 00000000 2009C054 
                       Port2   equ              0x2009C054
   43 00000000 2009C074 
                       Port3   equ              0x2009C074
   44 00000000 2009C094 
                       Port4   equ              0x2009C094
   45 00000000         
   46 00000000         
   47 00000000         ;This sets the built in pull up resistor
   48 00000000 4002C040 
                       PinMode0
                               equ              0x4002C040
   49 00000000 4002C044 
                       PinMode1
                               equ              0x4002C044
   50 00000000 4002C048 
                       PinMode2
                               equ              0x4002C048
   51 00000000 4002C04C 
                       PinMode3
                               equ              0x4002C04C
   52 00000000 4002C050 
                       PinMode4
                               equ              0x4002C050
   53 00000000 4002C054 
                       PinMode5
                               equ              0x4002C054
   54 00000000 4002C058 
                       PinMode6
                               equ              0x4002C058
   55 00000000 4002C05C 
                       PinMode7
                               equ              0x4002C05C
   56 00000000 4002C060 
                       PinMode8
                               equ              0x4002C060
   57 00000000 4002C064 
                       PinMode9
                               equ              0x4002C064



ARM Macro Assembler    Page 3 


   58 00000000         
   59 00000000         
   60 00000000         
   61 00000000         
   62 00000000                 MACRO
   63 00000000                 WRITEBITS        $BITS_TO_WRITE,$REGISTER_ADDY
   64 00000000                 MOV              R1,$BITS_TO_WRITE
   65 00000000                 LDR              R0,=$REGISTER_ADDY
   66 00000000                 STR              R1,[R0]
   67 00000000                 MEND
   68 00000000         
   69 00000000                 MACRO
   70 00000000                 SETBITS          $BITS_TO_SET,$REG_ADDY
   71 00000000                 LDR              R0,=$REG_ADDY
   72 00000000                 LDR              R1,[R0]
   73 00000000                 ORR              R1,R1,$BITS_TO_SET
   74 00000000                 STR              R1,[R0]
   75 00000000                 MEND
   76 00000000         
   77 00000000                 MACRO                        ;ME SMASHY R0,R1.
   78 00000000                 CLEARBITS        $BITS_TO_CLEAR,$REG_ADDY
   79 00000000                 LDR              R0,=$REG_ADDY
   80 00000000                 LDR              R1,[R0]
   81 00000000                 BIC              R1,R1,$BITS_TO_CLEAR
   82 00000000                 STR              R1,[R0]
   83 00000000                 MEND
   84 00000000         
   85 00000000         
   86 00000000         
   87 00000000         ;Not used
   88 00000000 2009C018 
                       FIOSET0 equ              0x2009C018
   89 00000000 2009C038 
                       FIOSET1 equ              0x2009C038
   90 00000000 2009C058 
                       FIOSET2 equ              0x2009C058
   91 00000000 2009C078 
                       FIOSET3 equ              0x2009C078
   92 00000000 2009C098 
                       FIOSET4 equ              0x2009C098
   93 00000000         
   94 00000000 2009C01C 
                       FIOCLR0 equ              0x2009C01C
   95 00000000 2009C03C 
                       FIOCLR1 equ              0x2009C03C
   96 00000000 2009C05C 
                       FIOCLR2 equ              0x2009C05C
   97 00000000 2009C07C 
                       FIOCLR3 equ              0x2009C07C
   98 00000000 2009C09C 
                       FIOCLR4 equ              0x2009C09C
   99 00000000         
  100 00000000         ;AREA DATAAREA, DATA ; HEY, ASSEMBLER: GIMME 16 bytes SP
                       ACE IN DATA MEMORY
  101 00000000         
  102 00000000                 END
    3 00000000         
    4 00000000         ;FIXME: Don't BL more than once 
    5 00000000         



ARM Macro Assembler    Page 4 


    6 00000000 00000032 
                       BaseSpeed
                               equ              50          ;we will use 50 for
                                                             now cos why not
    7 00000000 00000001 
                       Factor  equ              1
    8 00000000 00000001 
                       Range   equ              1
    9 00000000         
   10 00000000         
   11 00000000         ;We will be adjusting individual wheel speeds on the fly
                        to do the turning
   12 00000000         
   13 00000000                 GLOBAL           __main
   14 00000000                 AREA             Main, CODE, READONLY
   15 00000000                 ALIGN            2           ; MAKE SURE CODE DO
                                                            ESN'T START ON ODD 
                                                            BYTES
   16 00000000                 ENTRY
   17 00000000         
   18 00000000         
   19 00000000         __main
   20 00000000         
   21 00000000         ;these are the pins that control the motors. Set them to
                        output
   22 00000000 4871            ldr              r0,=DDR0
   23 00000002 F04F 010F       mov              r1,#2_1111
   24 00000006 6001            str              r1,[r0]
   25 00000008         
   26 00000008         
   27 00000008 F04F 0900       mov              r9,#0       ; we will store the
                                                             angle bias into r9
                                                            . This is a signed 
                                                            number
   28 0000000C         
   29 0000000C         
   30 0000000C F000 F87B       bl               INIT_PWM
   31 00000010         
   32 00000010 F000 F840       bl               Forward
   33 00000014         
   34 00000014         
   35 00000014 F000 F8BB       bl               INIT_ADC
   36 00000018         
   37 00000018         
   38 00000018         
   39 00000018         ;r0 is my result register
   40 00000018         
   41 00000018         Handle_Input
   42 00000018         
   43 00000018 F000 F803       bl               Read_Sensor
   44 0000001C         
   45 0000001C         
   46 0000001C F000 F847       bl               Process     ; we will have Proc
                                                            ess over here inste
                                                            ad
   47 00000020         
   48 00000020 E7FA            B                Handle_Input
   49 00000022         
   50 00000022         



ARM Macro Assembler    Page 5 


   51 00000022         
   52 00000022         ;TODO: The macro use here makes the code sub optimal
   53 00000022         
   54 00000022         Read_Sensor                          ;r1 r2 r3
   55 00000022         
   56 00000022                 SETBITS          #1,Adcr0    ;read pin 0
   71 00000022 486A            LDR              R0,=Adcr0
   72 00000024 6801            LDR              R1,[R0]
   73 00000026 F041 0101       ORR              R1,R1,#1
   74 0000002A 6001            STR              R1,[R0]
   57 0000002C                 CLEARBITS        #(0XFE),Adcr0
   79 0000002C 4867            LDR              R0,=Adcr0
   80 0000002E 6801            LDR              R1,[R0]
   81 00000030 F021 01FE       BIC              R1,R1,#(0XFE)
   82 00000034 6001            STR              R1,[R0]
   58 00000036         
   59 00000036         ;load in the  ADGR register
   60 00000036 4866            LDR              R0,=Adgr
   61 00000038         
   62 00000038         
   63 00000038         ;check if conversion is complete
   64 00000038         Converting_Y                         ;Front
   65 00000038 6801            LDR              R1,[R0]
   66 0000003A F011 4F00       TST              R1,#(1 << 31)
   67 0000003E D0FB            BEQ              Converting_Y
   68 00000040         
   69 00000040         ;r0` == 2_0011 0100
   70 00000040         ;tst == 2_0000 1000
   71 00000040         ;&-----------------
   72 00000040         ;       2_0000 0000 ==> Z == 1
   73 00000040         
   74 00000040         ;r0` == 2_0011 1100
   75 00000040         ;tst == 2_0000 1000
   76 00000040         ;&-----------------
   77 00000040         ;       2_0000 1000 ==> Z == 0
   78 00000040         
   79 00000040         
   80 00000040         ;0 0 0 0 1 0 0 1 0
   81 00000040         ;0 1 1 1 1 1 1 1 1
   82 00000040         
   83 00000040         ;0 0 0 0 0 0 0 0
   84 00000040         ;1 0 0 0 0 0 0 0
   85 00000040         
   86 00000040         Start_Converting_X                   ;Left
   87 00000040         
   88 00000040                 SETBITS          #2,Adcr0    ;read pin 1
   71 00000040 4862            LDR              R0,=Adcr0
   72 00000042 6801            LDR              R1,[R0]
   73 00000044 F041 0102       ORR              R1,R1,#2
   74 00000048 6001            STR              R1,[R0]
   89 0000004A                 CLEARBITS        #(0XFD),Adcr0
   79 0000004A 4860            LDR              R0,=Adcr0
   80 0000004C 6801            LDR              R1,[R0]
   81 0000004E F021 01FD       BIC              R1,R1,#(0XFD)
   82 00000052 6001            STR              R1,[R0]
   90 00000054         
   91 00000054         ;load in the  ADGR register 
   92 00000054         
   93 00000054 485E            LDR              R0,=Adgr



ARM Macro Assembler    Page 6 


   94 00000056         
   95 00000056         ;check if conversion is complete
   96 00000056         
   97 00000056         Converting_X
   98 00000056 6802            LDR              R2,[R0]
   99 00000058 F012 4F00       TST              R2,#(1 << 31)
  100 0000005C D0FB            BEQ              Converting_X
  101 0000005E         
  102 0000005E         
  103 0000005E         
  104 0000005E         Start_Converting_Z
  105 0000005E         
  106 0000005E                 SETBITS          #4,Adcr0
   71 0000005E 485B            LDR              R0,=Adcr0
   72 00000060 6801            LDR              R1,[R0]
   73 00000062 F041 0104       ORR              R1,R1,#4
   74 00000066 6001            STR              R1,[R0]
  107 00000068                 CLEARBITS        #(0XFB),Adcr0
   79 00000068 4858            LDR              R0,=Adcr0
   80 0000006A 6801            LDR              R1,[R0]
   81 0000006C F021 01FB       BIC              R1,R1,#(0XFB)
   82 00000070 6001            STR              R1,[R0]
  108 00000072         
  109 00000072         
  110 00000072         Converting_Z                         ;Right
  111 00000072         
  112 00000072 6803            LDR              R3,[R0]
  113 00000074 F013 4F00       TST              R3,#(1 << 31)
  114 00000078 D0FB            BEQ              Converting_Z
  115 0000007A         
  116 0000007A         
  117 0000007A         
  118 0000007A         ;format the results r1 r2 r3
  119 0000007A         
  120 0000007A         ;result is in r1
  121 0000007A         
  122 0000007A         ;shift the result right by 4
  123 0000007A         ;clear all other bits
  124 0000007A         
  125 0000007A         
  126 0000007A EA4F 1121       ASR              r1,#4
  127 0000007E F001 010F       BIC              r1,#0xFFFFFFF0 ;#2_1111 1111 11
                                                            11 1111 1111 1111 1
                                                            111 0000
  128 00000082         
  129 00000082 EA4F 1222       ASR              r2,#4
  130 00000086 F002 020F       BIC              r2,#0xFFFFFFF0
  131 0000008A         
  132 0000008A EA4F 1323       ASR              r3,#4
  133 0000008E F003 030F       BIC              r3,#0xFFFFFFF0
  134 00000092         
  135 00000092         
  136 00000092 4770            bx               lr
  137 00000094         
  138 00000094         
  139 00000094         Forward
  140 00000094         
  141 00000094 484F            ldr              r0,=Port0
  142 00000096 F04F 0106       mov              r1,#2_0110



ARM Macro Assembler    Page 7 


  143 0000009A 6001            str              r1,[r0]
  144 0000009C         
  145 0000009C         
  146 0000009C         ;reset to the base speed
  147 0000009C 484E            ldr              r0,= Match1
  148 0000009E F04F 0132       mov              r1, #BaseSpeed
  149 000000A2 6001            str              r1,[r0]
  150 000000A4         
  151 000000A4 484D            ldr              r0,=Match2
  152 000000A6 6001            str              r1,[r0]
  153 000000A8         
  154 000000A8         
  155 000000A8 4770            bx               lr
  156 000000AA         
  157 000000AA         Right
  158 000000AA 4770            bx               lr
  159 000000AC         Left
  160 000000AC 4770            bx               lr
  161 000000AE         
  162 000000AE         
  163 000000AE         Process                              ;WheelSpeedR = base
                                                            speed * ( SensorR/S
                                                            ensorL) * constant 
                                                            k
  164 000000AE         
  165 000000AE B500            push             {lr}        ; preserved the ret
                                                            urn address
  166 000000B0         
  167 000000B0         
  168 000000B0         ;r1 r2 and r3 are reserved  (Fs Ls Rs)
  169 000000B0         
  170 000000B0         
  171 000000B0         
  172 000000B0         
  173 000000B0         ;TODO: This is a mess of branches. Make sure this works.
                        Test the Avoidance first. If that works, test the Corre
                       ction
  174 000000B0         
  175 000000B0         
  176 000000B0         
  177 000000B0         ;we will do a range check if we feel like we need it
  178 000000B0         
  179 000000B0         ; if (Ls - Rs)  !=0 > there is an obstacle. start turnin
                       g
  180 000000B0         
  181 000000B0         ;if there is an obstacle. Avoid it 
  182 000000B0 429A            cmp              r2,r3
  183 000000B2 D114            bne              Avoid       ;aka if(r2 == r3) {
                                                            Avoid} else{Check_F
                                                            ront}
  184 000000B4         
  185 000000B4         ;else Ls == Rs. Check front for obstacle. if(obstacle){t
                       urn right} else {Correct_Course}
  186 000000B4         
  187 000000B4         
  188 000000B4         Check_Front
  189 000000B4 F1A1 0101       sub              r1,#Range
  190 000000B8 D402            bmi              Correct_Course ;if(Fs >= Range)
                                                            {Correct course} el



ARM Macro Assembler    Page 8 


                                                            se{Turn right}
  191 000000BA         
  192 000000BA F7FF FFF6       bl               Right
  193 000000BE         
  194 000000BE E01F            b                Process_Exit
  195 000000C0         
  196 000000C0         Correct_Course                       ; if(r9 ==0){Forwar
                                                            d} else if(r9 >0){L
                                                            eft} else{Right}
  197 000000C0 F1B9 0F00       cmp              r9,#0
  198 000000C4 D102            bne              Correction
  199 000000C6         
  200 000000C6         Go_Straight
  201 000000C6 F7FF FFE5       bl               Forward
  202 000000CA E019            b                Process_Exit
  203 000000CC         
  204 000000CC         Correction
  205 000000CC F1B9 0F00       cmp              r9,#0
  206 000000D0 D402            bmi              Go_Right
  207 000000D2         
  208 000000D2 F7FF FFEB       bl               Left
  209 000000D6         
  210 000000D6 E013            b                Process_Exit
  211 000000D8         
  212 000000D8         Go_Right
  213 000000D8 F7FF FFE7       bl               Right
  214 000000DC E010            b                Process_Exit
  215 000000DE         
  216 000000DE         Avoid
  217 000000DE         
  218 000000DE         ;left wheel
  219 000000DE         
  220 000000DE F04F 0032       mov              r0,#BaseSpeed
  221 000000E2         
  222 000000E2 FB03 F400       mul              r4,r3,r0
  223 000000E6 FBB4 F4F2       udiv             r4,r2       ; we will throw in 
                                                            k when we need it
  224 000000EA         
  225 000000EA 4D3B            ldr              r5,=Match1
  226 000000EC 602C            str              r4,[r5]     ;set the speed to t
                                                            he wheel. (need to 
                                                            check that the outp
                                                            ut is valid)
  227 000000EE         
  228 000000EE         ;right wheel
  229 000000EE FB02 F500       mul              r5,r2,r0
  230 000000F2 FBB5 F5F3       udiv             r5,r3       ; we will throw in 
                                                            k when we need it
  231 000000F6         
  232 000000F6 4E39            ldr              r6,=Match2
  233 000000F8 6035            str              r5,[r6]     ;set the speed to t
                                                            he wheel. (need to 
                                                            check that the outp
                                                            ut is valid)
  234 000000FA         
  235 000000FA         ;store the angle bias
  236 000000FA EBA5 0506       sub              r5,r6
  237 000000FE 44A9            add              r9,r5
  238 00000100         



ARM Macro Assembler    Page 9 


  239 00000100         
  240 00000100         Process_Exit
  241 00000100         
  242 00000100 F85D EB04       pop              {lr}        ;restore return add
                                                            ress
  243 00000104         
  244 00000104 4770            bx               lr
  245 00000106         
  246 00000106         
  247 00000106         
  248 00000106         
  249 00000106         ;--------------Init stuff. This will be here untiil I fi
                       gure out how this assembler works-----------------------
                       --------
  250 00000106         
  251 00000106         
  252 00000106         
  253 00000106         ;NOTE: This should be fixed now. Please check
  254 00000106         
  255 00000106         ;we need to switch on the pwm. Get this done I guess  (p
                       2.0 and p2.1)
  256 00000106         
  257 00000106         INIT_PWM
  258 00000106                 SETBITS          #2_1000000,Pconp ;PWM POWER ON
   71 00000106 4836            LDR              R0,=Pconp
   72 00000108 6801            LDR              R1,[R0]
   73 0000010A F041 0140       ORR              R1,R1,#2_1000000
   74 0000010E 6001            STR              R1,[R0]
  259 00000110         
  260 00000110         
  261 00000110         ; 2. Reset and hold the PWM module  Set bit 1 at 0x4001 
                       8004.  (Timer Control Register)
  262 00000110                 SETBITS          #2_10,Tcr
   71 00000110 4834            LDR              R0,=Tcr
   72 00000112 6801            LDR              R1,[R0]
   73 00000114 F041 0102       ORR              R1,R1,#2_10
   74 00000118 6001            STR              R1,[R0]
  263 0000011A         
  264 0000011A         
  265 0000011A         ;3. Peripheral clock: In the PCLKSEL0 register (Table 40
                       ), select PCLK_PWM1.  Set bit 12 at 0x400F C1A8 (Clock i
                       nput to PWM 1:1)
  266 0000011A                 SETBITS          #0X1000,PclkSel0 ; (basically 1
                                                             << 12)
   71 0000011A 4833            LDR              R0,=PclkSel0
   72 0000011C 6801            LDR              R1,[R0]
   73 0000011E F441 5180       ORR              R1,R1,#0X1000
   74 00000122 6001            STR              R1,[R0]
  267 00000124         
  268 00000124         
  269 00000124         ;4. Pins: Select which pin the PWM1 attaches to through 
                       the PINSEL registers. Attach PWM1 to P2[0] where our spe
                       aker is.  PINSEL4, that is, 0x4002 C010 should have its 
                       least significant bits set to 01.
  270 00000124                 SETBITS          #0101,PinSel4 ;sets pins 2.0 an
                                                            d 2.1 to pwm
   71 00000124 4831            LDR              R0,=PinSel4
   72 00000126 6801            LDR              R1,[R0]
   73 00000128 F041 0165       ORR              R1,R1,#0101



ARM Macro Assembler    Page 10 


   74 0000012C 6001            STR              R1,[R0]
  271 0000012E                 CLEARBITS        #2_1010,PinSel4 ;NOT EFFICIENT
   79 0000012E 482F            LDR              R0,=PinSel4
   80 00000130 6801            LDR              R1,[R0]
   81 00000132 F021 010A       BIC              R1,R1,#2_1010
   82 00000136 6001            STR              R1,[R0]
  272 00000138         
  273 00000138         
  274 00000138         ;5. Select pin modes for port pins with PWM1 functions t
                       hrough the PINMODE registers (Section 8.5). PINMODE4, se
                       nd Binary LSB 10 to 0x4002C050 so that the pin has neith
                       er a pull-up nor a pull-down resistor attached to it.
  275 00000138                 WRITEBITS        #2_1010,PinMode4 ;write 10
   64 00000138 F04F 010A       MOV              R1,#2_1010
   65 0000013C 482C            LDR              R0,=PinMode4
   66 0000013E 6001            STR              R1,[R0]
  276 00000140         
  277 00000140         
  278 00000140         ;Now to set up the Period, Pulse Width, and finally enab
                       le PWM output.
  279 00000140         ;6. Attach the system clock ->prescaler -> PWM -- write 
                       0x00000000 to the CounT Control Register (0x4001 8070).
  280 00000140                 WRITEBITS        #0,CounterTimercr
   64 00000140 F04F 0100       MOV              R1,#0
   65 00000144 482B            LDR              R0,=CounterTimercr
   66 00000146 6001            STR              R1,[R0]
  281 00000148         
  282 00000148         
  283 00000148         ;7. Set up the prescaler to count every 250 clock cycles
                        by storing 250 to the address of the Prescale Register 
                       (0x4001 800C)
  284 00000148         
  285 00000148         
  286 00000148         ;WRITEBITS #249,Prescaler
  287 00000148         
  288 00000148                 WRITEBITS        #(0xF << 10),Prescaler
   64 00000148 F44F 5170       MOV              R1,#(0xF << 10)
   65 0000014C 482A            LDR              R0,=Prescaler
   66 0000014E 6001            STR              R1,[R0]
  289 00000150         
  290 00000150         
  291 00000150         ;8. Set the PWM to reset when it reaches 100 counts by: 
                       (A) storing 100 in PWM1 Match Register 0 (0x4001 8018)
  292 00000150                 WRITEBITS        #100,Match0
   64 00000150 F04F 0164       MOV              R1,#100
   65 00000154 4829            LDR              R0,=Match0
   66 00000156 6001            STR              R1,[R0]
  293 00000158         
  294 00000158         
  295 00000158         ;9. Tell the PWM to turn off output when it reaches 50 b
                       y storing 50 in PWM1MatchRegister 1 (0x4001 801C)
  296 00000158                 WRITEBITS        #50,Match1
   64 00000158 F04F 0132       MOV              R1,#50
   65 0000015C 481E            LDR              R0,=Match1
   66 0000015E 6001            STR              R1,[R0]
  297 00000160                 WRITEBITS        #50,Match2  ;And PWM1MatchRegis
                                                            ter 2
   64 00000160 F04F 0132       MOV              R1,#50
   65 00000164 481D            LDR              R0,=Match2



ARM Macro Assembler    Page 11 


   66 00000166 6001            STR              R1,[R0]
  298 00000168         
  299 00000168         
  300 00000168         ;10. (B)Update the PWM timing with Match0 and Match1  by
                        "latching" them in: load 11 to the LSB of (0x4001 8050)
                       
  301 00000168         
  302 00000168                 SETBITS          #2_111,LoadEnabler ;latch m0 m1
                                                             and m2 ;LoadEnable
                                                            r allows the values
                                                             written in match r
                                                            egisters to take af
                                                            fect in the next cl
                                                            ock cycle
   71 00000168 4825            LDR              R0,=LoadEnabler
   72 0000016A 6801            LDR              R1,[R0]
   73 0000016C F041 0107       ORR              R1,R1,#2_111
   74 00000170 6001            STR              R1,[R0]
  303 00000172         
  304 00000172         
  305 00000172         ;SETBITS #2_1111,LoadEnabler;And Match2 and Match3
  306 00000172         
  307 00000172         
  308 00000172         ;11. (C)Make Match0 reset the PWM (Match0 is period) by 
                       sending #2_00010 to MatchControlReg (0x4001 8014)
  309 00000172         
  310 00000172                 WRITEBITS        #2,Matchcr
   64 00000172 F04F 0102       MOV              R1,#2
   65 00000176 4823            LDR              R0,=Matchcr
   66 00000178 6001            STR              R1,[R0]
  311 0000017A         
  312 0000017A         ;WRITEBITS #2_00010010,Matchcr
  313 0000017A         
  314 0000017A         
  315 0000017A         ;12. Enable PWM1 to output using the PWM Control Registe
                       r by sending 1 to the 9th bit of (0x4001 804C) (you can 
                       store 0x00200)
  316 0000017A                 SETBITS          #(3 << 9),PWMcr ;enable Match1 
                                                            and Match2 to outpu
                                                            t a pwm signal
   71 0000017A 4823            LDR              R0,=PWMcr
   72 0000017C 6801            LDR              R1,[R0]
   73 0000017E F441 61C0       ORR              R1,R1,#(3 << 9)
   74 00000182 6001            STR              R1,[R0]
  317 00000184         
  318 00000184         
  319 00000184         ;13. Start the timer that feeds the PWM by removing the 
                       reset, enabling and starting: send a #9 to the TimerCont
                       rolReg(0x4001 8004)
  320 00000184                 WRITEBITS        #2_1001,Tcr
   64 00000184 F04F 0109       MOV              R1,#2_1001
   65 00000188 4816            LDR              R0,=Tcr
   66 0000018A 6001            STR              R1,[R0]
  321 0000018C         
  322 0000018C         
  323 0000018C 4770            BX               LR
  324 0000018E         
  325 0000018E         
  326 0000018E         



ARM Macro Assembler    Page 12 


  327 0000018E         INIT_ADC                             ;targeting pins : p
                                                            0.23 p0.24 p0.25  F
                                                            s Ls Rs
  328 0000018E         ;enable adc in pconp
  329 0000018E                 SETBITS          #(1 << 12),Pconp
   71 0000018E 4814            LDR              R0,=Pconp
   72 00000190 6801            LDR              R1,[R0]
   73 00000192 F441 5180       ORR              R1,R1,#(1 << 12)
   74 00000196 6001            STR              R1,[R0]
  330 00000198         
  331 00000198         
  332 00000198         ;enable adc in the ad0cr register
  333 00000198                 WRITEBITS        #(1 << 21),Adcr0
   64 00000198 F44F 1100       MOV              R1,#(1 << 21)
   65 0000019C 480B            LDR              R0,=Adcr0
   66 0000019E 6001            STR              R1,[R0]
  334 000001A0         
  335 000001A0         
  336 000001A0         ;set the peripheral clock
  337 000001A0                 SETBITS          #(2_11 << 24),PclkSel0
   71 000001A0 4811            LDR              R0,=PclkSel0
   72 000001A2 6801            LDR              R1,[R0]
   73 000001A4 F041 7140       ORR              R1,R1,#(2_11 << 24)
   74 000001A8 6001            STR              R1,[R0]
  338 000001AA         
  339 000001AA         
  340 000001AA         ;set the pimode-PINSEL to adc (i think the problem was h
                       ere. Actually, it is)
  341 000001AA                 SETBITS          #(2_10101 << 14),PinSel1 ;2_101
                                                            
   71 000001AA 4818            LDR              R0,=PinSel1
   72 000001AC 6801            LDR              R1,[R0]
   73 000001AE F441 21A8       ORR              R1,R1,#(2_10101 << 14)
   74 000001B2 6001            STR              R1,[R0]
  342 000001B4         
  343 000001B4         
  344 000001B4         ;No pullup no pull down
  345 000001B4         
  346 000001B4 4816            LDR              R0,=PinMode0
  347 000001B6 F44F 2128       MOV              R1,#0xA8000 ;#0x28000
  348 000001BA 6001            STR              R1,[r0]
  349 000001BC         
  350 000001BC         
  351 000001BC         
  352 000001BC                 SETBITS          #(1 << 24),Adcr0 ; tell adc to 
                                                            start reading
   71 000001BC 4803            LDR              R0,=Adcr0
   72 000001BE 6801            LDR              R1,[R0]
   73 000001C0 F041 7180       ORR              R1,R1,#(1 << 24)
   74 000001C4 6001            STR              R1,[R0]
  353 000001C6         
  354 000001C6 4770            BX               LR
  355 000001C8         
  356 000001C8         
  357 000001C8                 END
              2009C000 
              40034000 
              40034004 
              2009C014 



ARM Macro Assembler    Page 13 


              4001801C 
              40018020 
              400FC0C4 
              40018004 
              400FC1A8 
              4002C010 
              4002C050 
              40018070 
              4001800C 
              40018018 
              40018050 
              40018014 
              4001804C 
              4002C004 
              4002C040 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -IC:\Users\cwkte_000\Documents
\cs100-tank\RTE -IC:\Users\cwkte_000\Documents\cs100-tank\RTE\Device\LPC1769 -I
C:\Keil_v5\ARM\PACK\ARM\CMSIS\4.4.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LP
C1700_DFP\2.1.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 516" --predefine="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1"
 --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Avoid 000000DE

Symbol: Avoid
   Definitions
      At line 216 in file main.s
   Uses
      At line 183 in file main.s
Comment: Avoid used once
Check_Front 000000B4

Symbol: Check_Front
   Definitions
      At line 188 in file main.s
   Uses
      None
Comment: Check_Front unused
Converting_X 00000056

Symbol: Converting_X
   Definitions
      At line 97 in file main.s
   Uses
      At line 100 in file main.s
Comment: Converting_X used once
Converting_Y 00000038

Symbol: Converting_Y
   Definitions
      At line 64 in file main.s
   Uses
      At line 67 in file main.s
Comment: Converting_Y used once
Converting_Z 00000072

Symbol: Converting_Z
   Definitions
      At line 110 in file main.s
   Uses
      At line 114 in file main.s
Comment: Converting_Z used once
Correct_Course 000000C0

Symbol: Correct_Course
   Definitions
      At line 196 in file main.s
   Uses
      At line 190 in file main.s
Comment: Correct_Course used once
Correction 000000CC

Symbol: Correction
   Definitions
      At line 204 in file main.s
   Uses
      At line 198 in file main.s
Comment: Correction used once
Forward 00000094

Symbol: Forward



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 139 in file main.s
   Uses
      At line 32 in file main.s
      At line 201 in file main.s

Go_Right 000000D8

Symbol: Go_Right
   Definitions
      At line 212 in file main.s
   Uses
      At line 206 in file main.s
Comment: Go_Right used once
Go_Straight 000000C6

Symbol: Go_Straight
   Definitions
      At line 200 in file main.s
   Uses
      None
Comment: Go_Straight unused
Handle_Input 00000018

Symbol: Handle_Input
   Definitions
      At line 41 in file main.s
   Uses
      At line 48 in file main.s
Comment: Handle_Input used once
INIT_ADC 0000018E

Symbol: INIT_ADC
   Definitions
      At line 327 in file main.s
   Uses
      At line 35 in file main.s
Comment: INIT_ADC used once
INIT_PWM 00000106

Symbol: INIT_PWM
   Definitions
      At line 257 in file main.s
   Uses
      At line 30 in file main.s
Comment: INIT_PWM used once
Left 000000AC

Symbol: Left
   Definitions
      At line 159 in file main.s
   Uses
      At line 208 in file main.s
Comment: Left used once
Main 00000000

Symbol: Main
   Definitions
      At line 14 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: Main unused
Process 000000AE

Symbol: Process
   Definitions
      At line 163 in file main.s
   Uses
      At line 46 in file main.s
Comment: Process used once
Process_Exit 00000100

Symbol: Process_Exit
   Definitions
      At line 240 in file main.s
   Uses
      At line 194 in file main.s
      At line 202 in file main.s
      At line 210 in file main.s
      At line 214 in file main.s

Read_Sensor 00000022

Symbol: Read_Sensor
   Definitions
      At line 54 in file main.s
   Uses
      At line 43 in file main.s
Comment: Read_Sensor used once
Right 000000AA

Symbol: Right
   Definitions
      At line 157 in file main.s
   Uses
      At line 192 in file main.s
      At line 213 in file main.s

Start_Converting_X 00000040

Symbol: Start_Converting_X
   Definitions
      At line 86 in file main.s
   Uses
      None
Comment: Start_Converting_X unused
Start_Converting_Z 0000005E

Symbol: Start_Converting_Z
   Definitions
      At line 104 in file main.s
   Uses
      None
Comment: Start_Converting_Z unused
__main 00000000

Symbol: __main
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 19 in file main.s
   Uses
      At line 13 in file main.s
Comment: __main used once
22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Adcr0 40034000

Symbol: Adcr0
   Definitions
      At line 7 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 56 in file main.s
      At line 79 in macro CLEARBITS
      at line 57 in file main.s
      At line 65 in macro WRITEBITS
      at line 333 in file main.s

Adgr 40034004

Symbol: Adgr
   Definitions
      At line 8 in file include.s
   Uses
      At line 60 in file main.s
      At line 93 in file main.s

BaseSpeed 00000032

Symbol: BaseSpeed
   Definitions
      At line 6 in file main.s
   Uses
      At line 148 in file main.s
      At line 220 in file main.s

CounterTimercr 40018070

Symbol: CounterTimercr
   Definitions
      At line 11 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 280 in file main.s
Comment: CounterTimercr used once
DDR0 2009C000

Symbol: DDR0
   Definitions
      At line 31 in file include.s
   Uses
      At line 22 in file main.s
Comment: DDR0 used once
DDR1 2009C020

Symbol: DDR1
   Definitions
      At line 32 in file include.s
   Uses
      None
Comment: DDR1 unused
DDR2 2009C040

Symbol: DDR2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 33 in file include.s
   Uses
      None
Comment: DDR2 unused
DDR3 2009C060

Symbol: DDR3
   Definitions
      At line 34 in file include.s
   Uses
      None
Comment: DDR3 unused
DDR4 2009C080

Symbol: DDR4
   Definitions
      At line 35 in file include.s
   Uses
      None
Comment: DDR4 unused
FIOCLR0 2009C01C

Symbol: FIOCLR0
   Definitions
      At line 94 in file include.s
   Uses
      None
Comment: FIOCLR0 unused
FIOCLR1 2009C03C

Symbol: FIOCLR1
   Definitions
      At line 95 in file include.s
   Uses
      None
Comment: FIOCLR1 unused
FIOCLR2 2009C05C

Symbol: FIOCLR2
   Definitions
      At line 96 in file include.s
   Uses
      None
Comment: FIOCLR2 unused
FIOCLR3 2009C07C

Symbol: FIOCLR3
   Definitions
      At line 97 in file include.s
   Uses
      None
Comment: FIOCLR3 unused
FIOCLR4 2009C09C

Symbol: FIOCLR4
   Definitions
      At line 98 in file include.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIOCLR4 unused
FIOSET0 2009C018

Symbol: FIOSET0
   Definitions
      At line 88 in file include.s
   Uses
      None
Comment: FIOSET0 unused
FIOSET1 2009C038

Symbol: FIOSET1
   Definitions
      At line 89 in file include.s
   Uses
      None
Comment: FIOSET1 unused
FIOSET2 2009C058

Symbol: FIOSET2
   Definitions
      At line 90 in file include.s
   Uses
      None
Comment: FIOSET2 unused
FIOSET3 2009C078

Symbol: FIOSET3
   Definitions
      At line 91 in file include.s
   Uses
      None
Comment: FIOSET3 unused
FIOSET4 2009C098

Symbol: FIOSET4
   Definitions
      At line 92 in file include.s
   Uses
      None
Comment: FIOSET4 unused
Factor 00000001

Symbol: Factor
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: Factor unused
LoadEnabler 40018050

Symbol: LoadEnabler
   Definitions
      At line 12 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 302 in file main.s
Comment: LoadEnabler used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Match0 40018018

Symbol: Match0
   Definitions
      At line 3 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 292 in file main.s
Comment: Match0 used once
Match1 4001801C

Symbol: Match1
   Definitions
      At line 4 in file include.s
   Uses
      At line 147 in file main.s
      At line 225 in file main.s
      At line 65 in macro WRITEBITS
      at line 296 in file main.s

Match2 40018020

Symbol: Match2
   Definitions
      At line 5 in file include.s
   Uses
      At line 151 in file main.s
      At line 232 in file main.s
      At line 65 in macro WRITEBITS
      at line 297 in file main.s

Matchcr 40018014

Symbol: Matchcr
   Definitions
      At line 13 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 310 in file main.s
Comment: Matchcr used once
PWMcr 4001804C

Symbol: PWMcr
   Definitions
      At line 14 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 316 in file main.s
Comment: PWMcr used once
PclkSel0 400FC1A8

Symbol: PclkSel0
   Definitions
      At line 10 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 266 in file main.s
Comment: PclkSel0 used once
Pconp 400FC0C4



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols


Symbol: Pconp
   Definitions
      At line 6 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 258 in file main.s
Comment: Pconp used once
PinMode0 4002C040

Symbol: PinMode0
   Definitions
      At line 48 in file include.s
   Uses
      At line 346 in file main.s
Comment: PinMode0 used once
PinMode1 4002C044

Symbol: PinMode1
   Definitions
      At line 49 in file include.s
   Uses
      None
Comment: PinMode1 unused
PinMode2 4002C048

Symbol: PinMode2
   Definitions
      At line 50 in file include.s
   Uses
      None
Comment: PinMode2 unused
PinMode3 4002C04C

Symbol: PinMode3
   Definitions
      At line 51 in file include.s
   Uses
      None
Comment: PinMode3 unused
PinMode4 4002C050

Symbol: PinMode4
   Definitions
      At line 52 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 275 in file main.s
Comment: PinMode4 used once
PinMode5 4002C054

Symbol: PinMode5
   Definitions
      At line 53 in file include.s
   Uses
      None
Comment: PinMode5 unused
PinMode6 4002C058




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: PinMode6
   Definitions
      At line 54 in file include.s
   Uses
      None
Comment: PinMode6 unused
PinMode7 4002C05C

Symbol: PinMode7
   Definitions
      At line 55 in file include.s
   Uses
      None
Comment: PinMode7 unused
PinMode8 4002C060

Symbol: PinMode8
   Definitions
      At line 56 in file include.s
   Uses
      None
Comment: PinMode8 unused
PinMode9 4002C064

Symbol: PinMode9
   Definitions
      At line 57 in file include.s
   Uses
      None
Comment: PinMode9 unused
PinSel0 4002C000

Symbol: PinSel0
   Definitions
      At line 19 in file include.s
   Uses
      None
Comment: PinSel0 unused
PinSel1 4002C004

Symbol: PinSel1
   Definitions
      At line 20 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 341 in file main.s
Comment: PinSel1 used once
PinSel10 4002C028

Symbol: PinSel10
   Definitions
      At line 27 in file include.s
   Uses
      None
Comment: PinSel10 unused
PinSel2 4002C008

Symbol: PinSel2
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 21 in file include.s
   Uses
      None
Comment: PinSel2 unused
PinSel3 4002C00C

Symbol: PinSel3
   Definitions
      At line 22 in file include.s
   Uses
      None
Comment: PinSel3 unused
PinSel4 4002C010

Symbol: PinSel4
   Definitions
      At line 23 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 270 in file main.s
      At line 79 in macro CLEARBITS
      at line 271 in file main.s

PinSel7 4002C01C

Symbol: PinSel7
   Definitions
      At line 24 in file include.s
   Uses
      None
Comment: PinSel7 unused
PinSel8 4002C020

Symbol: PinSel8
   Definitions
      At line 25 in file include.s
   Uses
      None
Comment: PinSel8 unused
PinSel9 4002C024

Symbol: PinSel9
   Definitions
      At line 26 in file include.s
   Uses
      None
Comment: PinSel9 unused
Port0 2009C014

Symbol: Port0
   Definitions
      At line 40 in file include.s
   Uses
      At line 141 in file main.s
Comment: Port0 used once
Port1 2009C034

Symbol: Port1
   Definitions



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      At line 41 in file include.s
   Uses
      None
Comment: Port1 unused
Port2 2009C054

Symbol: Port2
   Definitions
      At line 42 in file include.s
   Uses
      None
Comment: Port2 unused
Port3 2009C074

Symbol: Port3
   Definitions
      At line 43 in file include.s
   Uses
      None
Comment: Port3 unused
Port4 2009C094

Symbol: Port4
   Definitions
      At line 44 in file include.s
   Uses
      None
Comment: Port4 unused
Prescaler 4001800C

Symbol: Prescaler
   Definitions
      At line 2 in file include.s
   Uses
      At line 65 in macro WRITEBITS
      at line 288 in file main.s
Comment: Prescaler used once
Range 00000001

Symbol: Range
   Definitions
      At line 8 in file main.s
   Uses
      At line 189 in file main.s
Comment: Range used once
Tcr 40018004

Symbol: Tcr
   Definitions
      At line 9 in file include.s
   Uses
      At line 71 in macro SETBITS
      at line 262 in file main.s
      At line 65 in macro WRITEBITS
      at line 320 in file main.s

55 symbols
413 symbols in table
