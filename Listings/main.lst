


ARM Macro Assembler    Page 1 


    1 00000000         ; CS 100 Skeleton File
    2 00000000         ; Due Date:
    3 00000000         ; Student Name:
    4 00000000         ; Section:
    5 00000000         
    6 00000000         ; TITLE "CS100_AS6Skeleton"
    7 00000000         ; © 2015 DigiPen, All Rights Reserved.
    8 00000000         
    9 00000000         
   10 00000000                 INCLUDE          include.s
    1 00000000         ;
    2 00000000         ; CS 100 Data File
    3 00000000         ; Due Date:
    4 00000000         ; Student Name:
    5 00000000         ; Section:
    6 00000000         
    7 00000000         ; TITLE "CS_100_Data"
    8 00000000         ; © 2015 DigiPen, All Rights Reserved.
    9 00000000         
   10 00000000         ; The values saved for VAL1_H, 1_L, 2_H, and 2_L can all
                        be changed in this file only.
   11 00000000         ; Do NOT attempt to change the names of VAL1_H, VAL2, et
                       c.
   12 00000000         ; In the end, your code should multiply the numbers list
                       ed below.
   13 00000000         ; In the default example, you would be expected to multi
                       ply
   14 00000000         ; 0x123456789ABCDEF0 x 0x0FEDCBA987654321 = ?
   15 00000000         
   16 00000000 12345678 
                       VAL1_H  EQU              0X12345678  ; The Higher 4 byte
                                                            s of 0x123456789ABC
                                                            DEF0
   17 00000000 9ABCDEF0 
                       VAL1_L  EQU              0X9ABCDEF0  ; The Lower 4 bytes
                                                             of 0x123456789ABCD
                                                            EF0
   18 00000000 0FEDCBA9 
                       VAL2_H  EQU              0X0FEDCBA9  ; The Higher 4 byte
                                                            s of 0x0FEDCBA98765
                                                            4321
   19 00000000 87654321 
                       VAL2_L  EQU              0X87654321  ; The Lower 4 bytes
                                                             of 0x0FEDCBA987654
                                                            321
   20 00000000         
   21 00000000         
   22 00000000         ;This acts like a DDR
   23 00000000 2009C000 
                       FIODR0  equ              0x2009C000
   24 00000000 2009C020 
                       FIODR1  equ              0x2009C020
   25 00000000 2009C040 
                       FIODR2  equ              0x2009C040
   26 00000000 2009C060 
                       FIODR3  equ              0x2009C060
   27 00000000 2009C080 
                       FIODR4  equ              0x2009C080
   28 00000000         



ARM Macro Assembler    Page 2 


   29 00000000 2009C018 
                       FIOSET0 equ              0x2009C018
   30 00000000 2009C038 
                       FIOSET1 equ              0x2009C038
   31 00000000 2009C058 
                       FIOSET2 equ              0x2009C058
   32 00000000 2009C078 
                       FIOSET3 equ              0x2009C078
   33 00000000 2009C098 
                       FIOSET4 equ              0x2009C098
   34 00000000         
   35 00000000 2009C01C 
                       FIOCLR0 equ              0x2009C01C
   36 00000000 2009C03C 
                       FIOCLR1 equ              0x2009C03C
   37 00000000 2009C05C 
                       FIOCLR2 equ              0x2009C05C
   38 00000000 2009C07C 
                       FIOCLR3 equ              0x2009C07C
   39 00000000 2009C09C 
                       FIOCLR4 equ              0x2009C09C
   40 00000000         
   41 00000000         ;This acts like PORT
   42 00000000 2009C014 
                       PIN0    equ              0x2009C014
   43 00000000 2009C034 
                       PIN1    equ              0x2009C034
   44 00000000 2009C054 
                       PIN2    equ              0x2009C054
   45 00000000 2009C074 
                       PIN3    equ              0x2009C074
   46 00000000 2009C094 
                       PIN4    equ              0x2009C094
   47 00000000         
   48 00000000         
   49 00000000         ;This sets the built in pull up resistor
   50 00000000 4002C040 
                       PINMODE0
                               equ              0x4002C040
   51 00000000 4002C044 
                       PINMODE1
                               equ              0x4002C044
   52 00000000 4002C048 
                       PINMODE2
                               equ              0x4002C048
   53 00000000 4002C04C 
                       PINMODE3
                               equ              0x4002C04C
   54 00000000 4002C050 
                       PINMODE4
                               equ              0x4002C050
   55 00000000 4002C054 
                       PINMODE5
                               equ              0x4002C054
   56 00000000 4002C058 
                       PINMODE6
                               equ              0x4002C058
   57 00000000 4002C05C 
                       PINMODE7



ARM Macro Assembler    Page 3 


                               equ              0x4002C05C
   58 00000000 4002C060 
                       PINMODE8
                               equ              0x4002C060
   59 00000000 4002C064 
                       PINMODE9
                               equ              0x4002C064
   60 00000000         
   61 00000000         
   62 00000000         
   63 00000000         
   64 00000000         
   65 00000000         
   66 00000000         
   67 00000000                 AREA             DATAAREA, DATA ; HEY, ASSEMBLER
                                                            : GIMME 16 bytes SP
                                                            ACE IN DATA MEMORY
   68 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       RESULT  SPACE            16          ; IN FACT, I WANT 1
                                                            6BYTES IN DATA MEMO
                                                            RY. LET'S LABEL IT 
                                                            'RESULT'.
   69 00000010         
   70 00000010                 END
   11 00000010 2009C040 
                       FIODIR2 EQU              0X2009C040
   12 00000010 2009C054 
                       PINVAL2 EQU              0X2009C054
   13 00000010 40034000 
                       ADCcontrolregister
                               equ              0x40034000
   14 00000010         
   15 00000010                 MACRO
   16 00000010                 WRITEBITS        $BITS_TO_WRITE,$REGISTER_ADDY
   17 00000010                 MOV              R1,$BITS_TO_WRITE
   18 00000010                 LDR              R0,=$REGISTER_ADDY
   19 00000010                 STR              R1,[R0]
   20 00000010                 MEND
   21 00000010         
   22 00000010                 MACRO
   23 00000010                 SETBITS          $BITS_TO_SET,$REG_ADDY
   24 00000010                 LDR              R0,=$REG_ADDY
   25 00000010                 LDR              R1,[R0]
   26 00000010                 ORR              R1,R1,$BITS_TO_SET
   27 00000010                 STR              R1,[R0]
   28 00000010                 MEND
   29 00000010         
   30 00000010                 MACRO                        ;ME SMASHY R0,R1.
   31 00000010                 CLEARBITS        $BITS_TO_CLEAR,$REG_ADDY
   32 00000010                 LDR              R0,=$REG_ADDY
   33 00000010                 LDR              R1,[R0]
   34 00000010                 BIC              R1,R1,$BITS_TO_CLEAR
   35 00000010                 STR              R1,[R0]
   36 00000010                 MEND
   37 00000010         



ARM Macro Assembler    Page 4 


   38 00000010                 GLOBAL           __main
   39 00000010                 AREA             Main, CODE, READONLY
   40 00000000                 ALIGN            2           ; MAKE SURE CODE DO
                                                            ESN'T START ON ODD 
                                                            BYTES
   41 00000000                 ENTRY
   42 00000000         
   43 00000000         
   44 00000000         __main                               ; R0 IS TEMP REGIST
                                                            ER
   45 00000000         
   46 00000000         CONFIG_IO                            ; GET ALL VALUES FR
                                                            OM .INC FILE AND 
   47 00000000         
   48 00000000         
   49 00000000 4856            LDR              R0,=FIODR2  ; ; buzzer and ligh
                                                            ts
   50 00000002 F240 11FF       MOV              R1,#2_0000000000000000000000111
111111 
                                                            ; 
   51 00000006 6001            STR              R1,[R0]     ; MAKES ALL 9 LSB O
                                                            N PORT 2 OUTPUTS
   52 00000008 4855            LDR              R0,=FIODR0  ;
   53 0000000A F04F 0100       MOV              R1,#0       ; (ALL P0 AS INPUT)
                                                            
   54 0000000E 6001            STR              R1,[R0]
   55 00000010 F04F 0401       MOV              R4,#1       ; CLEAR R2 COUNTER
   56 00000014 F000 F810       BL               INIT_PWM
   57 00000018 F000 F852       BL               INIT_ADC
   58 0000001C                 SETBITS          #(1 << 24),0x40034000 ; tell ad
                                                            c to start reading
   24 0000001C 4851            LDR              R0,=0x40034000
   25 0000001E 6801            LDR              R1,[R0]
   26 00000020 F041 7180       ORR              R1,R1,#(1 << 24)
   27 00000024 6001            STR              R1,[R0]
   59 00000026         
   60 00000026         ;r0 is my result register
   61 00000026         
   62 00000026         Handle_Input
   63 00000026         
   64 00000026 F000 F863       BL               Start_Converting_Y
   65 0000002A 494F            LDR              R1,=0X4001800C ; this is the pr
                                                            escalar register
   66 0000002C         ;shift the result right by 4
   67 0000002C         ;clear all other bits
   68 0000002C EA4F 1727       ASR              r7,#4
   69 00000030 F007 070F       BIC              r7,#2_1111111111111111111111111
1110000
   70 00000034 600F            STR              r7,[r1]
   71 00000036         
   72 00000036 E7F6            B                Handle_Input
   73 00000038         
   74 00000038         INIT_PWM
   75 00000038                 SETBITS          #2_1000000,0x400FC0C4 
                                                            ;PWM POWER ON
   24 00000038 484C            LDR              R0,=0x400FC0C4
   25 0000003A 6801            LDR              R1,[R0]
   26 0000003C F041 0140       ORR              R1,R1,#2_1000000
   27 00000040 6001            STR              R1,[R0]



ARM Macro Assembler    Page 5 


   76 00000042         ; 2. Reset and hold the PWM module  Set bit 1 at 0x4001 
                       8004.  (Timer Control Register)
   77 00000042                 SETBITS          #2_10,0x40018004
   24 00000042 484B            LDR              R0,=0x40018004
   25 00000044 6801            LDR              R1,[R0]
   26 00000046 F041 0102       ORR              R1,R1,#2_10
   27 0000004A 6001            STR              R1,[R0]
   78 0000004C         ;3. Peripheral clock: In the PCLKSEL0 register (Table 40
                       ), select PCLK_PWM1.  Set bit 12 at 0x400F C1A8 (Clock i
                       nput to PWM 1:1)
   79 0000004C                 SETBITS          #0X1000,0x400FC1A8
   24 0000004C 4849            LDR              R0,=0x400FC1A8
   25 0000004E 6801            LDR              R1,[R0]
   26 00000050 F441 5180       ORR              R1,R1,#0X1000
   27 00000054 6001            STR              R1,[R0]
   80 00000056         ;4. Pins: Select which pin the PWM1 attaches to through 
                       the PINSEL registers. Attach PWM1 to P2[0] where our spe
                       aker is.  PINSEL4, that is, 0x4002 C010 should have its 
                       least significant bits set to 01.
   81 00000056                 SETBITS          #0101,0X4002C010
   24 00000056 4848            LDR              R0,=0X4002C010
   25 00000058 6801            LDR              R1,[R0]
   26 0000005A F041 0165       ORR              R1,R1,#0101
   27 0000005E 6001            STR              R1,[R0]
   82 00000060                 CLEARBITS        #2_1010,0X4002C010 
                                                            ;NOT EFFICIENT
   32 00000060 4845            LDR              R0,=0X4002C010
   33 00000062 6801            LDR              R1,[R0]
   34 00000064 F021 010A       BIC              R1,R1,#2_1010
   35 00000068 6001            STR              R1,[R0]
   83 0000006A         ;5. Select pin modes for port pins with PWM1 functions t
                       hrough the PINMODE registers (Section 8.5). PINMODE4, se
                       nd Binary LSB 10 to 0x4002C050 so that the pin has neith
                       er a pull-up nor a pull-down resistor attached to it.
   84 0000006A                 WRITEBITS        #2_1010,0x4002C050
   17 0000006A F04F 010A       MOV              R1,#2_1010
   18 0000006E 4843            LDR              R0,=0x4002C050
   19 00000070 6001            STR              R1,[R0]
   85 00000072         ;Now to set up the Period, Pulse Width, and finally enab
                       le PWM output.
   86 00000072         ;6. Attach the system clock ->prescaler -> PWM -- write 
                       0x00000000 to the CounT Control Register (0x4001 8070).
   87 00000072                 WRITEBITS        #0,0x40018070
   17 00000072 F04F 0100       MOV              R1,#0
   18 00000076 4842            LDR              R0,=0x40018070
   19 00000078 6001            STR              R1,[R0]
   88 0000007A         ;7. Set up the prescaler to count every 250 clock cycles
                        by storing 250 to the address of the Prescale Register 
                       (0x4001 800C)
   89 0000007A                 WRITEBITS        #249,0x4001800C
   17 0000007A F04F 01F9       MOV              R1,#249
   18 0000007E 483A            LDR              R0,=0x4001800C
   19 00000080 6001            STR              R1,[R0]
   90 00000082         ;8. Set the PWM to reset when it reaches 100 counts by: 
                       (A) storing 100 in PWM1 Match Register 0 (0x4001 8018)
   91 00000082                 WRITEBITS        #100,0X40018018
   17 00000082 F04F 0164       MOV              R1,#100
   18 00000086 483F            LDR              R0,=0X40018018
   19 00000088 6001            STR              R1,[R0]



ARM Macro Assembler    Page 6 


   92 0000008A         ;9. Tell the PWM to turn off output when it reaches 50 b
                       y storing 50 in PWM1MatchRegister 1 (0x4001 801C)
   93 0000008A                 WRITEBITS        #50,0X4001801C
   17 0000008A F04F 0132       MOV              R1,#50
   18 0000008E 483E            LDR              R0,=0X4001801C
   19 00000090 6001            STR              R1,[R0]
   94 00000092                 WRITEBITS        #50,0X40018020 ;And PWM1MatchRe
                                                            gister 2
   17 00000092 F04F 0132       MOV              R1,#50
   18 00000096 483D            LDR              R0,=0X40018020
   19 00000098 6001            STR              R1,[R0]
   95 0000009A         ;10. (B)Update the PWM timing with Match0 and Match1  by
                        "latching" them in: load 11 to the LSB of (0x4001 8050)
                       
   96 0000009A                 SETBITS          #2_1111,0X40018050 ;And Match2 
                                                            and Match3
   24 0000009A 483D            LDR              R0,=0X40018050
   25 0000009C 6801            LDR              R1,[R0]
   26 0000009E F041 010F       ORR              R1,R1,#2_1111
   27 000000A2 6001            STR              R1,[R0]
   97 000000A4         ;11. (C)Make Match0 reset the PWM (Match0 is period) by 
                       sending #2_00010 to MatchControlReg (0x4001 8014)
   98 000000A4                 WRITEBITS        #2_00010010,0x40018014 ;and Res
                                                            et Match1 while you
                                                             are at it
   17 000000A4 F04F 0112       MOV              R1,#2_00010010
   18 000000A8 483A            LDR              R0,=0x40018014
   19 000000AA 6001            STR              R1,[R0]
   99 000000AC         ;12. Enable PWM1 to output using the PWM Control Registe
                       r by sending 1 to the 9th bit of (0x4001 804C) (you can 
                       store 0x00200)
  100 000000AC                 SETBITS          #2_0000000011,0x4001804C
   24 000000AC 483A            LDR              R0,=0x4001804C
   25 000000AE 6801            LDR              R1,[R0]
   26 000000B0 F041 0103       ORR              R1,R1,#2_0000000011
   27 000000B4 6001            STR              R1,[R0]
  101 000000B6         ;13. Start the timer that feeds the PWM by removing the 
                       reset, enabling and starting: send a #9 to the TimerCont
                       rolReg(0x4001 8004)
  102 000000B6                 WRITEBITS        #2_1001,0x40018004
   17 000000B6 F04F 0109       MOV              R1,#2_1001
   18 000000BA 482D            LDR              R0,=0x40018004
   19 000000BC 6001            STR              R1,[R0]
  103 000000BE 4770            BX               LR
  104 000000C0         
  105 000000C0         
  106 000000C0         
  107 000000C0         INIT_ADC
  108 000000C0         ;enable adc in pconp
  109 000000C0                 SETBITS          #(1 << 12),0x400FC0C4
   24 000000C0 482A            LDR              R0,=0x400FC0C4
   25 000000C2 6801            LDR              R1,[R0]
   26 000000C4 F441 5180       ORR              R1,R1,#(1 << 12)
   27 000000C8 6001            STR              R1,[R0]
  110 000000CA         ;enable adc in the ad0cr register
  111 000000CA                 WRITEBITS        #(1 << 21),ADCcontrolregister
   17 000000CA F44F 1100       MOV              R1,#(1 << 21)
   18 000000CE 4825            LDR              R0,=ADCcontrolregister
   19 000000D0 6001            STR              R1,[R0]



ARM Macro Assembler    Page 7 


  112 000000D2         ;set the peripheral clock
  113 000000D2                 SETBITS          #(2_11 << 24),0x400FC1A8
   24 000000D2 4828            LDR              R0,=0x400FC1A8
   25 000000D4 6801            LDR              R1,[R0]
   26 000000D6 F041 7140       ORR              R1,R1,#(2_11 << 24)
   27 000000DA 6001            STR              R1,[R0]
  114 000000DC         ;set the pimode-PINSEL to adc (i think the problem was h
                       ere. Actually, it is)
  115 000000DC                 SETBITS          #(2_101 << 14),0x4002C004
   24 000000DC 482F            LDR              R0,=0x4002C004
   25 000000DE 6801            LDR              R1,[R0]
   26 000000E0 F441 31A0       ORR              R1,R1,#(2_101 << 14)
   27 000000E4 6001            STR              R1,[R0]
  116 000000E6         ;No pullup no pull down
  117 000000E6         
  118 000000E6 482E            LDR              R0,=0x4002C040
  119 000000E8 F44F 3120       MOV              R1,#0x28000
  120 000000EC 6001            STR              R1,[r0]
  121 000000EE         
  122 000000EE 4770            BX               LR
  123 000000F0         
  124 000000F0         Start_Converting_Y
  125 000000F0         
  126 000000F0                 SETBITS          #1,ADCcontrolregister
   24 000000F0 481C            LDR              R0,=ADCcontrolregister
   25 000000F2 6801            LDR              R1,[R0]
   26 000000F4 F041 0101       ORR              R1,R1,#1
   27 000000F8 6001            STR              R1,[R0]
  127 000000FA                 CLEARBITS        #(0XFE),ADCcontrolregister
   32 000000FA 481A            LDR              R0,=ADCcontrolregister
   33 000000FC 6801            LDR              R1,[R0]
   34 000000FE F021 01FE       BIC              R1,R1,#(0XFE)
   35 00000102 6001            STR              R1,[R0]
  128 00000104         
  129 00000104         ;load in the  ADGR register
  130 00000104 4827            LDR              R0,=0x40034004
  131 00000106         ;check if conversion is complete
  132 00000106         Converting_Y
  133 00000106 6801            LDR              R1,[R0]
  134 00000108 F011 4F00       TST              R1,#(1 << 31)
  135 0000010C D0FB            BEQ              Converting_Y
  136 0000010E         
  137 0000010E         
  138 0000010E         ;return result
  139 0000010E         
  140 0000010E 460F            MOV              R7,R1
  141 00000110         
  142 00000110 4770            BX               LR
  143 00000112         
  144 00000112         
  145 00000112         ;r0` == 2_0011 0100
  146 00000112         ;tst == 2_0000 1000
  147 00000112         ;&-----------------
  148 00000112         ;       2_0000 0000 ==> Z == 1
  149 00000112         
  150 00000112         ;r0` == 2_0011 1100
  151 00000112         ;tst == 2_0000 1000
  152 00000112         ;&-----------------
  153 00000112         ;       2_0000 1000 ==> Z == 0



ARM Macro Assembler    Page 8 


  154 00000112         
  155 00000112         
  156 00000112         ;0 0 0 0 1 0 0 1 0
  157 00000112         ;0 1 1 1 1 1 1 1 1
  158 00000112         
  159 00000112         ;0 0 0 0 0 0 0 0
  160 00000112         ;1 0 0 0 0 0 0 0
  161 00000112         
  162 00000112         Start_Converting_X
  163 00000112         
  164 00000112                 SETBITS          #1,ADCcontrolregister
   24 00000112 4814            LDR              R0,=ADCcontrolregister
   25 00000114 6801            LDR              R1,[R0]
   26 00000116 F041 0101       ORR              R1,R1,#1
   27 0000011A 6001            STR              R1,[R0]
  165 0000011C                 CLEARBITS        #(0XFE),ADCcontrolregister
   32 0000011C 4811            LDR              R0,=ADCcontrolregister
   33 0000011E 6801            LDR              R1,[R0]
   34 00000120 F021 01FE       BIC              R1,R1,#(0XFE)
   35 00000124 6001            STR              R1,[R0]
  166 00000126         
  167 00000126         ;load in the  ADGR register 
  168 00000126         
  169 00000126 481F            LDR              R0,=0x40034004
  170 00000128         
  171 00000128         ;check if conversion is complete
  172 00000128         
  173 00000128         Converting_X
  174 00000128 6801            LDR              R1,[R0]
  175 0000012A F011 4F00       TST              R1,#(1 << 31)
  176 0000012E D0FB            BEQ              Converting_X
  177 00000130         
  178 00000130         ;return result
  179 00000130 460F            MOV              R7,R1
  180 00000132 4770            BX               LR
  181 00000134         
  182 00000134         READ_BUTTONS
  183 00000134 F8DF 9070       LDR              R9,=PIN0    ; LOAD R9 WITH THE 
                                                            ADDRESS OF THE BUTT
                                                            ON VALUES
  184 00000138 F8D9 3000       LDR              R3,[R9]     ; LOAD R3 WITH THE 
                                                            INFORMATION IN ADDR
                                                            ESS R9
  185 0000013C F013 0F04       TST              R3,#2_00000100 ; GIVES ME 100 I
                                                            F BUTTON NOT PRESSE
                                                            D, 0 IF PRESSED
  186 00000140 F8DF A068       LDR              R10,=PIN2
  187 00000144 D0FF            BEQ              BUTTON_PRESSED ; BUTTON PRESSED
                                                            , TURN ON LIGHTS.
  188 00000146         ;MOV R5,#0;BUTTON ISN'T PREVIOUSLY PRESSED.
  189 00000146         ;R5=0, BUTTON IS MOST RECENTLY NOT PRESSED. R5=1, BUTTON
                        WAS MOST RECENTLY PRESSED 
  190 00000146         ;B READ_BUTTONS
  191 00000146         
  192 00000146         
  193 00000146         BUTTON_PRESSED
  194 00000146 2D00            CMP              R5,#0
  195 00000148 D1F4            BNE              READ_BUTTONS ;BUTTON IS *STILL*
                                                             PRESSED



ARM Macro Assembler    Page 9 


  196 0000014A         ;NEW PRESS
  197 0000014A F102 0205       ADD              R2,R2,#5    ;this delays the ti
                                                            mer
  198 0000014E F04F 0501       MOV              R5,#1       ;BUTTON IS MOST REC
                                                            ENTLY PRESSED
  199 00000152 4905            LDR              R1,=0X4001800C
  200 00000154 600A            STR              R2,[R1]
  201 00000156 4770            BX               LR
  202 00000158         ;B READ_BUTTONS
  203 00000158         
  204 00000158         LOOPENDLESSLY
  205 00000158 E7FE            B                LOOPENDLESSLY
  206 0000015A                 END
              00 00 2009C040 
              2009C000 
              40034000 
              4001800C 
              400FC0C4 
              40018004 
              400FC1A8 
              4002C010 
              4002C050 
              40018070 
              40018018 
              4001801C 
              40018020 
              40018050 
              40018014 
              4001804C 
              4002C004 
              4002C040 
              40034004 
              2009C014 
              2009C054 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\object
s\main.d -o.\objects\main.o -I"C:\Users\c.terence\Desktop\CS100 Tank\RTE" -I"C:
\Users\c.terence\Desktop\CS100 Tank\RTE\Device\LPC1769" -I"C:\Program Files (x8
6)\Keil_uvision5\ARM\PACK\ARM\CMSIS\4.4.0\CMSIS\Include" -I"C:\Program Files (x
86)\Keil_uvision5\ARM\PACK\Keil\LPC1700_DFP\2.1.0\Device\Include" --predefine="
__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 513" --predefine="_RTE_ SETA
 1" --predefine="LPC175x_6x SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATAAREA 00000000

Symbol: DATAAREA
   Definitions
      At line 67 in file include.s
   Uses
      None
Comment: DATAAREA unused
RESULT 00000000

Symbol: RESULT
   Definitions
      At line 68 in file include.s
   Uses
      None
Comment: RESULT unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BUTTON_PRESSED 00000146

Symbol: BUTTON_PRESSED
   Definitions
      At line 193 in file main.s
   Uses
      At line 187 in file main.s
Comment: BUTTON_PRESSED used once
CONFIG_IO 00000000

Symbol: CONFIG_IO
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: CONFIG_IO unused
Converting_X 00000128

Symbol: Converting_X
   Definitions
      At line 173 in file main.s
   Uses
      At line 176 in file main.s
Comment: Converting_X used once
Converting_Y 00000106

Symbol: Converting_Y
   Definitions
      At line 132 in file main.s
   Uses
      At line 135 in file main.s
Comment: Converting_Y used once
Handle_Input 00000026

Symbol: Handle_Input
   Definitions
      At line 62 in file main.s
   Uses
      At line 72 in file main.s
Comment: Handle_Input used once
INIT_ADC 000000C0

Symbol: INIT_ADC
   Definitions
      At line 107 in file main.s
   Uses
      At line 57 in file main.s
Comment: INIT_ADC used once
INIT_PWM 00000038

Symbol: INIT_PWM
   Definitions
      At line 74 in file main.s
   Uses
      At line 56 in file main.s
Comment: INIT_PWM used once
LOOPENDLESSLY 00000158

Symbol: LOOPENDLESSLY



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 204 in file main.s
   Uses
      At line 205 in file main.s
Comment: LOOPENDLESSLY used once
Main 00000000

Symbol: Main
   Definitions
      At line 39 in file main.s
   Uses
      None
Comment: Main unused
READ_BUTTONS 00000134

Symbol: READ_BUTTONS
   Definitions
      At line 182 in file main.s
   Uses
      At line 195 in file main.s
Comment: READ_BUTTONS used once
Start_Converting_X 00000112

Symbol: Start_Converting_X
   Definitions
      At line 162 in file main.s
   Uses
      None
Comment: Start_Converting_X unused
Start_Converting_Y 000000F0

Symbol: Start_Converting_Y
   Definitions
      At line 124 in file main.s
   Uses
      At line 64 in file main.s
Comment: Start_Converting_Y used once
__main 00000000

Symbol: __main
   Definitions
      At line 44 in file main.s
   Uses
      At line 38 in file main.s
Comment: __main used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADCcontrolregister 40034000

Symbol: ADCcontrolregister
   Definitions
      At line 13 in file main.s
   Uses
      At line 18 in macro ÿÿ`
      at line 111 in file main.s
      At line 24 in macro ÿÿTBITS
      at line 126 in file main.s
      At line 32 in macro )` í`@
      at line 127 in file main.s

FIOCLR0 2009C01C

Symbol: FIOCLR0
   Definitions
      At line 35 in file include.s
   Uses
      None
Comment: FIOCLR0 unused
FIOCLR1 2009C03C

Symbol: FIOCLR1
   Definitions
      At line 36 in file include.s
   Uses
      None
Comment: FIOCLR1 unused
FIOCLR2 2009C05C

Symbol: FIOCLR2
   Definitions
      At line 37 in file include.s
   Uses
      None
Comment: FIOCLR2 unused
FIOCLR3 2009C07C

Symbol: FIOCLR3
   Definitions
      At line 38 in file include.s
   Uses
      None
Comment: FIOCLR3 unused
FIOCLR4 2009C09C

Symbol: FIOCLR4
   Definitions
      At line 39 in file include.s
   Uses
      None
Comment: FIOCLR4 unused
FIODIR2 2009C040

Symbol: FIODIR2
   Definitions
      At line 11 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIODIR2 unused
FIODR0 2009C000

Symbol: FIODR0
   Definitions
      At line 23 in file include.s
   Uses
      At line 52 in file main.s
Comment: FIODR0 used once
FIODR1 2009C020

Symbol: FIODR1
   Definitions
      At line 24 in file include.s
   Uses
      None
Comment: FIODR1 unused
FIODR2 2009C040

Symbol: FIODR2
   Definitions
      At line 25 in file include.s
   Uses
      At line 49 in file main.s
Comment: FIODR2 used once
FIODR3 2009C060

Symbol: FIODR3
   Definitions
      At line 26 in file include.s
   Uses
      None
Comment: FIODR3 unused
FIODR4 2009C080

Symbol: FIODR4
   Definitions
      At line 27 in file include.s
   Uses
      None
Comment: FIODR4 unused
FIOSET0 2009C018

Symbol: FIOSET0
   Definitions
      At line 29 in file include.s
   Uses
      None
Comment: FIOSET0 unused
FIOSET1 2009C038

Symbol: FIOSET1
   Definitions
      At line 30 in file include.s
   Uses
      None
Comment: FIOSET1 unused
FIOSET2 2009C058



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: FIOSET2
   Definitions
      At line 31 in file include.s
   Uses
      None
Comment: FIOSET2 unused
FIOSET3 2009C078

Symbol: FIOSET3
   Definitions
      At line 32 in file include.s
   Uses
      None
Comment: FIOSET3 unused
FIOSET4 2009C098

Symbol: FIOSET4
   Definitions
      At line 33 in file include.s
   Uses
      None
Comment: FIOSET4 unused
PIN0 2009C014

Symbol: PIN0
   Definitions
      At line 42 in file include.s
   Uses
      At line 183 in file main.s
Comment: PIN0 used once
PIN1 2009C034

Symbol: PIN1
   Definitions
      At line 43 in file include.s
   Uses
      None
Comment: PIN1 unused
PIN2 2009C054

Symbol: PIN2
   Definitions
      At line 44 in file include.s
   Uses
      At line 186 in file main.s
Comment: PIN2 used once
PIN3 2009C074

Symbol: PIN3
   Definitions
      At line 45 in file include.s
   Uses
      None
Comment: PIN3 unused
PIN4 2009C094

Symbol: PIN4
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 46 in file include.s
   Uses
      None
Comment: PIN4 unused
PINMODE0 4002C040

Symbol: PINMODE0
   Definitions
      At line 50 in file include.s
   Uses
      None
Comment: PINMODE0 unused
PINMODE1 4002C044

Symbol: PINMODE1
   Definitions
      At line 51 in file include.s
   Uses
      None
Comment: PINMODE1 unused
PINMODE2 4002C048

Symbol: PINMODE2
   Definitions
      At line 52 in file include.s
   Uses
      None
Comment: PINMODE2 unused
PINMODE3 4002C04C

Symbol: PINMODE3
   Definitions
      At line 53 in file include.s
   Uses
      None
Comment: PINMODE3 unused
PINMODE4 4002C050

Symbol: PINMODE4
   Definitions
      At line 54 in file include.s
   Uses
      None
Comment: PINMODE4 unused
PINMODE5 4002C054

Symbol: PINMODE5
   Definitions
      At line 55 in file include.s
   Uses
      None
Comment: PINMODE5 unused
PINMODE6 4002C058

Symbol: PINMODE6
   Definitions
      At line 56 in file include.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Comment: PINMODE6 unused
PINMODE7 4002C05C

Symbol: PINMODE7
   Definitions
      At line 57 in file include.s
   Uses
      None
Comment: PINMODE7 unused
PINMODE8 4002C060

Symbol: PINMODE8
   Definitions
      At line 58 in file include.s
   Uses
      None
Comment: PINMODE8 unused
PINMODE9 4002C064

Symbol: PINMODE9
   Definitions
      At line 59 in file include.s
   Uses
      None
Comment: PINMODE9 unused
PINVAL2 2009C054

Symbol: PINVAL2
   Definitions
      At line 12 in file main.s
   Uses
      None
Comment: PINVAL2 unused
VAL1_H 12345678

Symbol: VAL1_H
   Definitions
      At line 16 in file include.s
   Uses
      None
Comment: VAL1_H unused
VAL1_L 9ABCDEF0

Symbol: VAL1_L
   Definitions
      At line 17 in file include.s
   Uses
      None
Comment: VAL1_L unused
VAL2_H 0FEDCBA9

Symbol: VAL2_H
   Definitions
      At line 18 in file include.s
   Uses
      None
Comment: VAL2_H unused
VAL2_L 87654321




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: VAL2_L
   Definitions
      At line 19 in file include.s
   Uses
      None
Comment: VAL2_L unused
37 symbols
388 symbols in table
